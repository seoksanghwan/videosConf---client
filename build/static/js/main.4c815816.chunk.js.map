{"version":3,"sources":["actions/index.js","reducers/index.js","containers/App.jsx","components/Alert.jsx","components/Main.jsx","components/LoginAlert.jsx","components/Navbar.jsx","components/About.jsx","components/Rooms.jsx","components/RoomsDetails.jsx","components/Home.jsx","components/App.jsx","service/firebase.js","index.js"],"names":["IS_LOGIN_USER","FETCH_PRODUCTS_BEGIN","GET_ERRORS","IS_LOGGED_IN_DATA","IS_LOGOUT_DATA","ROOMS_DATA","RTC_SETTING","ADD_MEDIA","REMOVE_VIDEO","READY_TO_CALL","LOCAL_VIDEO","CONNECTED_LOCAL","DISCONNECTED_WEBCAM","AUDIO_CHECK","ROOM_ADD","ROOM_REMOVE","CHANNEL_CHECK","PASSWORD_CHECK","POP_EVENT_CHECK","POP_ClOSE_CHECK","ROOM_MAINTENANCE","ROOM_TITLE_MATCH","FORMAT_ROOM_PASS","ALERT_MESSAGE_CHANGE","SPINNER_ACTION","ALERT_WARNING","LOGGIN_POP_OPEN","ROOM_REMOVE_POP","initialState","items","isLoggedIn","error","isroom","peers","inroom","webrtc","roomname","mute","length","pass","popopen","focusid","focustitle","aboutValueTitle","alertMessage","spinner","alertBoxBottom","alertColor","channelAlertMessage","loggedPopUp","deleteAelrt","rtc","Alert","_ref","passCheckRef","passwordCheck","popClose","inputCancel","react_default","a","createElement","className","onClick","htmlFor","type","name","ref","placeholder","Link","to","concat","style","color","Main","saveFormData","inputRef","passRef","src","alt","id","components_Alert","LoginAlert","Navbar","loginpopEvent","alertMessageFormat","onLoginButtonClick","signAlert","onLogoutButtonClick","url","components_LoginAlert","About","goingRef","goingChannel","Rooms","roomDelete","roomData","popEvent","roomDeletePop","uniqWith","isEqual","map","data","key","_id","title","userName","data-id","data-mail","userMail","RoomsDetails","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","remoteVideos","room_name","match","params","startLoclaVideo","localVideo","AddpeerVideo","joinChat","_this2","_this$props","email","disconnect","handleSelfMute","connectVideo","autoPlay","vid","nick","split","getContainerId","getId","playsInline","Component","Home","window","onpopstate","e","location","pathname","disconnectSet","roomMatch","connection","stopLocalVideo","leaveRoom","history","go","push","alertMessageChange","init","components_Navbar","Switch","Route","exact","path","render","components_Main","assign","components_About","components_Rooms","Redirect","RoomsDetails_RoomsDetails","bind","localref","alert","React","App","usingUserData","channelData","chatRoomUsing","event","preventDefault","channelTitle","inputNode","value","channelPassword","passNode","aboutPopEvent","MainAlertMessageChange","dataId","target","dataset","gochannel","_this$props2","titleEqualCheck","filter","goingChannels","aboutAlertMessageChange","dataTite","passCheck","checkNode","passpostCheck","_this$props3","channelcheck","alertHide","formatRoomPassword","loginUser","userlogout","BrowserRouter","_Object$assign","Home_Home","saveFormDatas","roomDeletes","signAlertMessage","defineProperty","localHostIp","localHostIpApi","provider","firebase","GoogleAuthProvider","createHistory","forceRefresh","socket","io","connect","state","dispatch","ownProps","user","signInWithPopup","then","result","credential","accessToken","users","uid","displayName","photoURL","axios","post","res","token","defaults","headers","common","setAuthToken","decoded","jwt_decode","localStorage","setItem","JSON","stringify","resultBoolean","catch","parse","getItem","userRemove","removeItem","signOut","on","logedin","roomPassword","callback","titleOverLap","Boolean","every","roommData","emit","booelan","undefined","deleteMsg","localele","LioWebRTC","localVideoEl","dataOnly","network","maxPeers","minPeers","debug","sessionId","peer","payload","localvideo","start","startLocalVideo","config","targetremote","stream","attachStream","autoplay","joinroom","joinRoom","func","password","roomid","check","item","inputdata","shouldCheck","message","roomObj","roomTitle","targetTitle","roomNull","popBoolean","isroomdata","roomTitleUrl","isRoomValid","some","roomBoolean","withref","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","store","createStore","arguments","action","objectSpread","islogedin","loggedTrue","roomCopy","toConsumableArray","dataroom","peerCopy","p","closed","unmute","removeRoom","roomId","removeUpdate","applyMiddleware","logger","ReactDOM","react_redux_es","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.4c815816.chunk.js","sourcesContent":["export const IS_LOGIN_USER = 'IS_LOGIN_USER';\nexport const FETCH_PRODUCTS_BEGIN = 'FETCH_PRODUCTS_BEGIN';\nexport const GET_ERRORS = 'GET_ERRORS';\nexport const IS_LOGGED_IN_DATA = 'IS_LOGGED_IN_DATA';\nexport const IS_LOGOUT_DATA = 'IS_LOGOUT_DATA';\nexport const ROOMS_DATA = 'ROOMS_DATA';\nexport const RTC_SETTING = 'RTC_SETTING';\nexport const ADD_MEDIA = 'ADD_MEDIA';\nexport const REMOVE_VIDEO = 'REMOVE_VIDEO';\nexport const READY_TO_CALL = 'READY_TO_CALL';\nexport const LOCAL_VIDEO = 'LOCAL_VDIEO';\nexport const CONNECTED_LOCAL = 'CONNECTED_LOCAL';\nexport const DISCONNECTED_WEBCAM = 'DISCONNECTED_WEBCAM';\nexport const AUDIO_CHECK = 'AUDIO_CHECK';\nexport const ROOM_ADD = 'ROOM_ADD';\nexport const ROOM_REMOVE = 'ROOM_REMOVE';\nexport const CHANNEL_CHECK = 'CHANNEL_CHECK';\nexport const PASSWORD_CHECK = 'PASSWORD_CHECK';\nexport const POP_EVENT_CHECK = 'POP_EVENT_CHECK';\nexport const POP_ClOSE_CHECK = 'POP_ClOSE_CHECK';\nexport const ROOM_MAINTENANCE = 'ROOM_MAINTENANCE';\nexport const ROOM_TITLE_MATCH = 'ROOM_TITLE_MATCH';\nexport const FORMAT_ROOM_PASS = 'FORMAT_ROOM_PASS';\nexport const ALERT_MESSAGE_CHANGE = 'ALERT_MESSAGE_CHANGE';\nexport const SPINNER_ACTION = 'SPINNER_ACTION';\nexport const ALERT_WARNING = 'ALERT_WARNING';\nexport const LOGGIN_POP_OPEN = 'LOGGIN_POP_OPEN';\nexport const ROOM_REMOVE_POP = 'ROOM_REMOVE_POP';\n\nexport const isLogoutData = () => ({\n  type: IS_LOGOUT_DATA\n});\n\nexport const isLoggedInData = () => ({\n  type: IS_LOGGED_IN_DATA\n});\n\nexport const fetchProductsBegin = () => ({\n  type: FETCH_PRODUCTS_BEGIN\n});\n\nexport const getErrors = () => ({\n  type: GET_ERRORS\n});\n\nexport const roomdData = () => ({\n  type: ROOMS_DATA\n});\n\nexport const isLoginUser = products => ({\n  type: IS_LOGIN_USER\n});\n\n/* video RTC */\nexport const rtcSetting = products => ({\n  type: RTC_SETTING\n});\n\nexport const addMeida = products => ({\n  type: ADD_MEDIA\n});\n\nexport const removeVideo = products => ({\n  type: REMOVE_VIDEO\n});\n\nexport const readyToCall = products => ({\n  type: READY_TO_CALL\n});\n\nexport const localVideo = products => ({\n  type: LOCAL_VIDEO\n});\n\nexport const connectedLocal = products => ({\n  type: CONNECTED_LOCAL\n});\n\nexport const disconnectedWebcam = products => ({\n  type: DISCONNECTED_WEBCAM\n});\n\nexport const audioCheck = products => ({\n  type: AUDIO_CHECK\n});\n\nexport const roomAdd = products => ({\n  type: ROOM_ADD\n});\n\nexport const roomRemove = products => ({\n  type: ROOM_REMOVE\n});\n\nexport const channelCheck = products => ({\n  type: CHANNEL_CHECK\n});\n\nexport const passwordCheck = products => ({\n  type: PASSWORD_CHECK\n});\n\nexport const popEventCheck = products => ({\n  type: POP_EVENT_CHECK\n});\n\nexport const popCloseCheck = products => ({\n  type: POP_ClOSE_CHECK\n});\n\nexport const roomMaintenance = products => ({\n  type: ROOM_MAINTENANCE\n});\n\nexport const roomMatchTtile = products => ({\n  type: ROOM_TITLE_MATCH\n});\n\nexport const formatRoomPass = products => ({\n  type: FORMAT_ROOM_PASS\n});\n\nexport const alertMessageChange = products => ({\n  type: ALERT_MESSAGE_CHANGE\n});\n\nexport const spinnerAction = products => ({\n  type: SPINNER_ACTION\n});\n\nexport const alertWarning = products => ({\n  type: ALERT_WARNING\n});\n\nexport const loginPopOpen = products => ({\n  type: LOGGIN_POP_OPEN\n});\n\nexport const roomRemovePop = products => ({\n  type: ROOM_REMOVE_POP\n});\n","import LioWebRTC from 'liowebrtc';\nimport { combineReducers } from 'redux';\nimport createHistory from 'history/createBrowserHistory';\nimport {\n\tFETCH_PRODUCTS_BEGIN,\n\tIS_LOGIN_USER,\n\tIS_LOGGED_IN_DATA,\n\tIS_LOGOUT_DATA,\n\tGET_ERRORS,\n\tROOMS_DATA,\n\tRTC_SETTING,\n\tCONNECTED_LOCAL,\n\tLOCAL_VIDEO,\n\tADD_MEDIA,\n\tREMOVE_VIDEO,\n\tREADY_TO_CALL,\n\tDISCONNECTED_WEBCAM,\n\tAUDIO_CHECK,\n\tROOM_ADD,\n\tROOM_REMOVE,\n\tCHANNEL_CHECK,\n\tPASSWORD_CHECK,\n\tPOP_EVENT_CHECK,\n\tPOP_ClOSE_CHECK,\n\tROOM_MAINTENANCE,\n\tROOM_TITLE_MATCH,\n\tFORMAT_ROOM_PASS,\n\tALERT_MESSAGE_CHANGE,\n\tSPINNER_ACTION,\n\tALERT_WARNING,\n\tLOGGIN_POP_OPEN,\n\tROOM_REMOVE_POP\n} from '../actions';\n\nconst initialState = {\n\titems: {},\n\tisLoggedIn: false,\n\terror: null,\n\tisroom: [],\n\tpeers: [],\n\tinroom: false,\n\twebrtc: null,\n\troomname: '',\n\tmute: false,\n\tlength: 0,\n\tpass: false,\n\tpopopen: false,\n\tfocusid: '',\n\tfocustitle: '',\n\taboutValueTitle: '',\n\talertMessage: '회의실 패스워드를 입력해주세요.',\n\tspinner: false,\n\talertBoxBottom: '',\n\talertColor: '#3c29aa',\n\tchannelAlertMessage: false,\n\tloggedPopUp: false,\n\tdeleteAelrt: false\n};\n\nexport default function productReducer(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase FETCH_PRODUCTS_BEGIN:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tislogedin: false,\n\t\t\t\titems: {},\n\t\t\t\tisroom: []\n\t\t\t};\n\n\t\tcase IS_LOGIN_USER:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoggedIn: true,\n\t\t\t\titems: action.data\n\t\t\t};\n\n\t\tcase IS_LOGGED_IN_DATA:\n\t\t\tlet user = Boolean(action.data) ? action.data : {};\n\t\t\tlet loggedTrue = Boolean(action.data) ? true : false;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoggedIn: loggedTrue,\n\t\t\t\titems: user\n\t\t\t}\n\n\t\tcase IS_LOGOUT_DATA:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoggedIn: false,\n\t\t\t\titems: {}\n\t\t\t}\n\n\t\tcase ROOMS_DATA:\n\t\t\tlet roomCopy = [...action.data, ...state.isroom];\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisroom: roomCopy\n\t\t\t}\n\n\t\tcase ROOM_ADD:\n\t\t\tconst dataroom = [...state.isroom, action.data];\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisroom: dataroom\n\t\t\t}\n\n\t\tcase ROOM_REMOVE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdeleteAelrt: action.deleteMsg\n\t\t\t}\n\n\t\tcase RTC_SETTING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\twebrtc: action.payload\n\t\t\t};\n\n\t\tcase ADD_MEDIA:\n\t\t\tlet peerCopy = [...state.peers, action.peer];\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpeers: peerCopy\n\t\t\t};\n\n\t\tcase REMOVE_VIDEO:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpeers: state.peers.filter(p => !p.closed)\n\t\t\t};\n\n\t\tcase READY_TO_CALL:\n\t\t\treturn {\n\t\t\t\t...state\n\t\t\t};\n\n\t\tcase LOCAL_VIDEO:\n\t\t\treturn {\n\t\t\t\t...state\n\t\t\t};\n\n\t\tcase CONNECTED_LOCAL:\n\t\t\treturn {\n\t\t\t\t...state\n\t\t\t};\n\n\t\tcase DISCONNECTED_WEBCAM:\n\t\t\treturn {\n\t\t\t\t...state\n\t\t\t};\n\n\t\tcase AUDIO_CHECK:\n\t\t\t(state.mute) ? action.func.unmute() : action.func.mute();\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmute: !state.mute\n\t\t\t};\n\n\t\tcase CHANNEL_CHECK:\n\t\t\treturn {\n\t\t\t\t...state\n\t\t\t}\n\n\t\tcase PASSWORD_CHECK:\n\t\t\tif (action.result) {\n\t\t\t\tstate.inroom = true\n\t\t\t} else {\n\t\t\t\tstate.inroom = false\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpass: action.result,\n\t\t\t\tfocustitle: action.title,\n\t\t\t\tspinner: false\n\t\t\t}\n\n\t\tcase POP_EVENT_CHECK:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpopopen: action.booelan,\n\t\t\t\tfocusid: action.dataId,\n\t\t\t\taboutValueTitle: action.targetTitle\n\t\t\t}\n\n\t\tcase FORMAT_ROOM_PASS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpass: action.pass\n\t\t\t}\n\n\t\tcase POP_ClOSE_CHECK:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpopopen: action.booelan,\n\t\t\t\tloggedPopUp: action.popBoolean,\n\t\t\t\tdeleteAelrt: action.deleteMsg\n\t\t\t}\n\n\t\tcase ROOM_MAINTENANCE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpopopen: action.booelan,\n\t\t\t\tpass: action.data\n\t\t\t}\n\n\t\tcase ROOM_TITLE_MATCH:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tinroom: action.roomBoolean\n\t\t\t}\n\n\t\tcase ALERT_MESSAGE_CHANGE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\talertMessage: action.message\n\t\t\t}\n\n\t\tcase SPINNER_ACTION:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tspinner: action.check\n\t\t\t}\n\n\t\tcase ALERT_WARNING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\talertBoxBottom: action.alert,\n\t\t\t\talertColor: action.color,\n\t\t\t\tchannelAlertMessage: action.resultBoolean\n\t\t\t}\n\n\t\tcase ROOM_REMOVE_POP:\n\t\t\tconst removeRoom = state.isroom;\n\t\t\tconst roomId = action.data;\n\t\t\tconst removeUpdate = removeRoom.filter((data) => roomId !== data._id);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisroom: removeUpdate,\n\t\t\t\tdeleteAelrt: action.deleteMsg\n\t\t\t}\t\n\n\t\tcase LOGGIN_POP_OPEN:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloggedPopUp : action.popBoolean\n\t\t\t}\n\t\t\t\n\t\tcase GET_ERRORS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\titems: {},\n\t\t\t\tisLoggedIn: false\n\t\t\t}\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import { connect } from \"react-redux\";\nimport io from 'socket.io-client';\nimport { bindActionCreators } from 'redux'\nimport React, { Component } from 'react';\nimport { debounce } from \"lodash\";\nimport * as firebase from 'firebase';\nimport LioWebRTC from 'liowebrtc';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nimport {\n  IS_LOGIN_USER,\n  IS_LOGGED_IN_DATA,\n  IS_LOGOUT_DATA,\n  GET_ERRORS,\n  ROOMS_DATA,\n  CONNECTED_LOCAL,\n  LOCAL_VIDEO,\n  RTC_SETTING,\n  ADD_MEDIA,\n  REMOVE_VIDEO,\n  READY_TO_CALL,\n  AUDIO_CHECK,\n  ROOM_ADD,\n  ROOM_REMOVE,\n  CHANNEL_CHECK,\n  PASSWORD_CHECK,\n  POP_EVENT_CHECK,\n  POP_ClOSE_CHECK,\n  ROOM_MAINTENANCE,\n  ROOM_TITLE_MATCH,\n  FORMAT_ROOM_PASS,\n  ALERT_MESSAGE_CHANGE,\n  SPINNER_ACTION,\n  ALERT_WARNING,\n  LOGGIN_POP_OPEN,\n  ROOM_REMOVE_POP\n} from '../actions';\nimport App from \"../components/App.jsx\";\nimport createHistory from 'history/createBrowserHistory';\n\n//https://videos-conf-service.herokuapp.com/\n//http://localhost:8080/\nlet rtc;\nconst simpLioRTC = 'https://sm1.lio.app:443/';\nconst localHostIp = 'https://videos-conf-service.herokuapp.com/';\nconst localHostIpApi = `${localHostIp}api/auth/`;\nconst provider = new firebase.auth.GoogleAuthProvider();\nconst history = createHistory({ forceRefresh: false });\nconst socket = io(localHostIp);\nconst setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = token;\n  }\n  else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\n\nconst mapStateToProps = state => ({\n  items: state.items,\n  isLoggedIn: state.isLoggedIn,\n  error: state.error,\n  isroom: state.isroom,\n  inroom: state.inroom,\n  peers: state.peers,\n  webrtc: state.webrtc,\n  mute: state.mute,\n  length: state.length,\n  popopen: state.popopen,\n  focusid: state.focusid,\n  pass: state.pass,\n  focustitle: state.focustitle,\n  aboutValueTitle: state.aboutValueTitle,\n  alertMessage: state.alertMessage,\n  spinner: state.spinner,\n  alertBoxBottom: state.alertBoxBottom,\n  alertColor: state.alertColor,\n  channelAlertMessage : state.channelAlertMessage,\n  loggedPopUp : state.loggedPopUp,\n  deleteAelrt : state.deleteAelrt\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    loginUser: (user) => {\n      firebase.auth().signInWithPopup(provider).then(result => {\n        let token = result.credential.accessToken;\n        let users = result.user;\n        let loginUser = {\n          uid: users.uid,\n          name: users.displayName,\n          url: users.photoURL,\n          email: users.email\n        }\n        axios.post(`${localHostIpApi}login`, loginUser).then(res => {\n          const { token } = res.data;\n          setAuthToken(token);\n          const decoded = jwt_decode(token);\n          dispatch({\n            type: IS_LOGIN_USER,\n            data: decoded\n          });\n          localStorage.setItem('user', JSON.stringify(decoded));\n        });\n        dispatch({\n          type: ALERT_WARNING,\n          alert: '패스워드를 입력해주세요.',\n          color: '#3f46ad',\n          resultBoolean : false\n        });\n      }).catch(error => {\n        dispatch({ type: GET_ERRORS, error });\n      });\n    },\n    usingUserData: () => {\n      let user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: IS_LOGGED_IN_DATA,\n        data: user\n      });\n    },\n    userlogout: () => {\n      let userRemove = localStorage.removeItem('user');\n      firebase.auth().signOut().then(() => {\n        history.push('/');\n        dispatch({\n          type: IS_LOGOUT_DATA,\n          data: userRemove\n        });\n        dispatch({\n          type: ALERT_WARNING,\n          alert: '패스워드를 입력해주세요.',\n          color: '#3f46ad',\n          resultBoolean : false\n        });\n      }).catch(error => {\n        dispatch({ type: GET_ERRORS, error });\n      });\n    },\n    channelData: () => {\n      socket.on('initialList', (data) => {\n        dispatch({\n          type: ROOMS_DATA,\n          data\n        });\n      });\n      socket.on('itemAdded', (data) => {\n        dispatch({\n          type: ROOM_ADD,\n          data\n        });\n      });\n      socket.on('itemRemove', (data) => {\n        dispatch({\n          type: ROOM_REMOVE_POP,\n          data\n        });\n      });\n    },\n    saveFormData: (logedin, items, title, roomPassword, isroom, callback) => {\n      let titleOverLap = Boolean(isroom.every(roommData => roommData.title !== title));\n      if (logedin) {\n        if (title.length > 1 && title.length < 11 && roomPassword.length > 1 && roomPassword.length < 11) {\n          let data = {\n            title,\n            roomPassword,\n            userName: items.name,\n            userMail: items.email\n          };\n          dispatch({\n            type: ALERT_WARNING,\n            alert: '패스워드를 입력해주세요.',\n            color: '#3f46ad',\n            resultBoolean : false\n          });\n          if (titleOverLap || isroom === []) {\n            socket.emit('addItem', data);\n            dispatch({\n              type: POP_EVENT_CHECK,\n              booelan: true,\n              title\n            })\n            callback(title)\n          } else {\n            dispatch({\n              type: ALERT_WARNING,\n              alert: '중복된 채널이 있습니다.',\n              color: '#e30641',\n              resultBoolean : true\n            });\n          }\n        } else {\n          dispatch({\n            type: ALERT_WARNING,\n            alert: '채널 제목 및 패스워드는 2글자 이상 11글자 미만이에요.\\n다시 한번 작성해주세요',\n            color: '#e30641',\n            resultBoolean : true\n          });\n        }\n      } else {\n        dispatch({\n          type: ALERT_WARNING,\n          alert: '로그인을 해주셔야, 채널을 생성 하실 수 있습니다.',\n          color: '#e30641',\n          resultBoolean : true\n        });\n      }\n    },\n    goingChannels: (isLoggedIn, channelTitle, isroom, titleEqualCheck, callback) => {\n      if (isLoggedIn) {\n        if (channelTitle.length > 1 && channelTitle.length < 11) {\n          if (titleEqualCheck !== undefined) {\n            if (titleEqualCheck.title === channelTitle) {\n              callback(channelTitle);\n              dispatch({\n                type: ALERT_WARNING,\n                alert: '패스워드를 입력해주세요.',\n                color: '#3f46ad',\n                resultBoolean : false\n              });\n            }\n          } else {\n            dispatch({\n              type: ALERT_WARNING,\n              alert: '채널 목록에 없는 채널입니다.',\n              color: '#e30641',\n              resultBoolean : true\n            });\n          }\n        } else {\n          dispatch({\n            type: ALERT_WARNING,\n            alert: '채널 제목은 2글자 미만이거나, 11글자 이상 일 수 없습니다.',\n            color: '#e30641',\n            resultBoolean : true\n          });\n        }\n      } else {\n        dispatch({\n          type: ALERT_WARNING,\n          alert: '로그인을 해주셔야, 채널에 입장 하실 수 있습니다.',\n          color: '#e30641',\n          resultBoolean : true\n        });\n      }\n    },\n    roomDelete: (id) => {\n      localStorage.setItem('roomObjId', JSON.stringify(id));\n      dispatch({\n        type: ROOM_REMOVE,\n        deleteMsg : true\n      });\n    },\n    roomDeletePop: () => {\n      const id = JSON.parse(localStorage.getItem('roomObjId'));\n      dispatch({\n        type: ROOM_REMOVE_POP,\n        deleteMsg : false\n      });\n      socket.emit('removeItem', id);\n    },\n    init: (localele) => {\n      let user = JSON.parse(localStorage.getItem('user'));\n      let email = (user !== null) ? `${user.name},${user.url}` : 'Not user';\n      rtc = new LioWebRTC({\n        url: simpLioRTC,\n        localVideoEl: '',\n        dataOnly: false,\n        network: {\n          maxPeers: 2,\n          minPeers: 1\n        },\n        debug: false,\n        nick: email\n      });\n      rtc\n        .on('connectionReady', (sessionId) => {\n          dispatch({\n            type: CONNECTED_LOCAL,\n            sessionId\n          });\n        })\n        .on('videoRemoved', (peer) => {\n          dispatch({\n            type: REMOVE_VIDEO,\n            peer\n          });\n        });\n      dispatch({ type: RTC_SETTING, payload: rtc });\n    },\n    startLoclaVideo: (localvideo) => {\n      dispatch({ type: LOCAL_VIDEO, start: rtc.startLocalVideo() });\n      if (localvideo) {\n        rtc.config.localVideoEl = localvideo;\n      } else {\n        rtc.config.localVideoEl = localvideo;\n      }\n    },\n    AddpeerVideo: (targetremote) => {\n      rtc.on('videoAdded', (stream, peer) => {\n        if (targetremote) {\n          dispatch({\n            type: ADD_MEDIA,\n            peer,\n            rtc\n          });\n          rtc.attachStream(stream, targetremote[peer.id], { autoplay: true });\n        }\n      })\n    },\n    joinChat: (roomname) => {\n      rtc.on('readyToCall', () => {\n        if (roomname !== undefined) {\n          dispatch({\n            type: READY_TO_CALL,\n            joinroom: rtc.joinRoom(roomname)\n          });\n        }\n      });\n    },\n    handleSelfMute: (e) => {\n      dispatch({\n        type: AUDIO_CHECK,\n        func: rtc\n      });\n    },\n    passpostCheck: (password, roomid, isroom, dataTite, event) => {\n      event.preventDefault();\n      dispatch({\n        type: SPINNER_ACTION,\n        check: true\n      });\n      isroom.filter(item => {\n        if (item._id === roomid || item.title === dataTite) {\n          if (password.length >= 1) {\n            const inputdata = {\n              password,\n              roomid: item._id\n            }\n            axios.post(`${localHostIp}passcheck`, inputdata)\n              .then(data => {\n                const shouldCheck = data.data.message;\n                dispatch({\n                  type: PASSWORD_CHECK,\n                  result: shouldCheck,\n                  title: item.title\n                })\n                const roomObj = {\n                  item,\n                  shouldCheck\n                }\n                if (shouldCheck === true) {\n                  localStorage.setItem('roomPassResults', JSON.stringify(roomObj));\n                  dispatch({\n                    type: ALERT_WARNING,\n                    alert: '패스워드를 입력해주세요.',\n                    color: '#3f46ad'\n                  });\n                } else {\n                  localStorage.setItem('roomPassResults', JSON.stringify(roomObj));\n                  dispatch({\n                    type: SPINNER_ACTION,\n                    check: false\n                  });\n                  dispatch({\n                    type: ALERT_WARNING,\n                    alert: '패스워드를 잘못 입력하셨습니다.',\n                    color: '#e30641'\n                  });\n                }\n              })\n              .catch(error => {\n                dispatch({ type: GET_ERRORS, error });\n              });\n          } else {\n            dispatch({\n              type: SPINNER_ACTION,\n              check: false\n            });\n            dispatch({\n              type: ALERT_WARNING,\n              alert: '패스워드가 입력되지 않았습니다.',\n              color: '#e30641'\n            });\n          }\n        }\n      });\n    },\n    chatRoomUsing: () => {\n      let roomData = JSON.parse(localStorage.getItem('roomPassResults'));\n      let roomTitle = history.location.pathname.split('/rooms/')[1];\n      if (roomTitle !== undefined && roomData !== null) {\n        if (history.location.pathname.split('/rooms/')[1] && roomData !== null) {\n          if (roomTitle === roomData.item.title && roomData.shouldCheck) {\n            dispatch({\n              type: ROOM_MAINTENANCE,\n              data: roomData.shouldCheck\n            });\n          } else {\n            dispatch({\n              type: ROOM_MAINTENANCE,\n              data: false\n            });\n          }\n        }\n      }\n    },\n    popEvent: (event) => {\n      const dataId = event.target.dataset.id;\n      dispatch({\n        type: POP_EVENT_CHECK,\n        booelan: true,\n        dataId\n      });\n      dispatch({\n        type: ALERT_MESSAGE_CHANGE,\n        message: `채널 패스워드를 입력해주세요.`\n      });\n      dispatch({\n        type: ALERT_WARNING,\n        alert: '채널 패스워드를 입력해주세요.',\n        color: '#3f46ad'\n      });\n    },\n    aboutPopEvent: (targetTitle) => {\n      dispatch({\n        type: POP_EVENT_CHECK,\n        booelan: true,\n        targetTitle\n      });\n    },\n    popClose: () => {\n      let roomDataRmove = localStorage.removeItem('roomPassResults');\n      let roomNull = roomDataRmove === null ? false : null\n      dispatch({\n        type: POP_ClOSE_CHECK,\n        booelan: false,\n        popBoolean : false,\n        deleteMsg : false\n      });\n      dispatch({\n        type: ROOM_MAINTENANCE,\n        data: roomNull\n      });\n      dispatch({\n        type: ALERT_WARNING,\n        alert: '패스워드를 입력해주세요.',\n        color: '#3f46ad',\n        resultBoolean : false\n      });\n    },\n    inputCancel: () => {\n      dispatch({\n        type: POP_ClOSE_CHECK,\n        booelan: false\n      });\n    },\n    formatRoomPassword: () => {\n      let roomDataRmove = localStorage.removeItem('roomPassResults');\n      if (history.location.pathname.split('/rooms/')[1]) {\n        dispatch({\n          type: FORMAT_ROOM_PASS,\n          data: null,\n          pass: true\n        });\n      }\n    },\n    roomMatch: (isroomdata) => {\n      let roomTitleUrl = history.location.pathname.split('/rooms/')[1];\n      if (history.location.pathname.split('/rooms/')[1]) {\n        let title = isroomdata.map(data => data.title);\n        let isRoomValid = title.some(item => item === roomTitleUrl);\n        if (isRoomValid) {\n          dispatch({\n            type: ROOM_TITLE_MATCH,\n            roomBoolean: true\n          });\n        } else {\n          dispatch({\n            type: ROOM_TITLE_MATCH,\n            roomBoolean: false\n          });\n        }\n      }\n    },\n    MainAlertMessageChange: () => {\n      dispatch({\n        type: ALERT_MESSAGE_CHANGE,\n        message: '채널이 생성되었습니다.\\n지금 바로 입장하실려면 패스워드를 입력해주세요.'\n      });\n    },\n    aboutAlertMessageChange: () => {\n      dispatch({\n        type: ALERT_MESSAGE_CHANGE,\n        message: `채널 패스워드를 입력해주세요.`\n      });\n    },\n    alertMessageFormat : () => {\n      dispatch({\n        type: ALERT_WARNING,\n        alert: '패스워드를 입력해주세요.',\n        color: '#3f46ad',\n        resultBoolean : false\n      });\n    },\n    loginpopEvent: () => {\n      dispatch({\n        type : LOGGIN_POP_OPEN,\n        popBoolean : true\n      })\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps, null, { withref: true })(App);\n\n\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst Alert = ({ spinner, passCheckRef, passwordCheck, popClose, pass, focustitle, inputCancel, alertMessage, alertBoxBottom, alertColor }) => {\n  return (\n    <div className=\"AlertBox\">\n      <div className=\"loginContent\">\n        <div className=\"close-btn\">\n          <i className=\"fas fa-times\" onClick={popClose}></i>\n        </div>\n        <form>\n          <h3>{alertMessage}</h3>\n          <label htmlFor=\"pass_check\">\n            <input type=\"password\" name=\"pass_check\" ref={passCheckRef} placeholder='패스워드' />\n            <button name=\"pass_check\" onClick={passwordCheck} type=\"button\">\n              check\n              {\n                spinner ?  <i className=\"fas fa-spinner\"></i> : null\n              }\n            </button>\n          </label>\n        </form>\n        <div className=\"pass-check\">\n          {\n            pass ?\n              <Link to={`rooms/${focustitle}`}  >패스워드가 일치합니다. 참여하실려면 클릭해주세요.</Link> : <p style={{ color : alertColor }}>{alertBoxBottom}</p>\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Alert;","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport Alert from './Alert.jsx';\n\nconst Main = ({ channelAlertMessage, saveFormData, inputRef, passRef, passCheckRef, passwordCheck, popClose, pass, focustitle, inputCancel, popopen, alertMessage, spinner, alertBoxBottom, alertColor }) => {\n  return (\n    <div className=\"meeting-room-create\">\n      <div className=\"rooms_title\">\n        <form>\n          <label htmlFor=\"rooms_title\">\n            <h1>\n              <img src=\"https://github.com/seoksanghwan/videosConf---client/blob/master/src/img/logo.png?raw=true\" alt=\"\" />\n              <Link className=\"navbar-item\" to=\"/rooms\">Channel List</Link>\n            </h1>\n            <div className=\"inputbox\">\n              <input type=\"text\" id=\"rooms_title\" name=\"rooms_title\" ref={inputRef} placeholder=\"안녕하세요. 채널을 생성해주세요.\" />\n              <input type=\"password\" id=\"rooms_password\" name=\"rooms_title\" ref={passRef} placeholder=\"패스워드도 설정해봐요.\" />\n            </div>\n            <button name=\"rooms_title\" onClick={saveFormData} >Create!</button>\n            {\n              channelAlertMessage ?\n                <p className=\"goingChannel-Check-Message\" style={{ color: alertColor }}>{alertBoxBottom}</p> :\n                null\n            }\n          </label>\n        </form>\n      </div>\n      {\n        (popopen) ?\n          <Alert alertColor={alertColor} alertBoxBottom={alertBoxBottom} spinner={spinner} alertMessage={alertMessage} passCheckRef={passCheckRef} passwordCheck={passwordCheck} popClose={popClose} pass={pass} focustitle={focustitle} inputCancel={inputCancel} /> :\n          null\n      }\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst LoginAlert = ({ popClose }) => {\n  return (\n    <div className=\"AlertBox\">\n      <div className=\"loginContent\">\n        <div className=\"close-btn\">\n          <i className=\"fas fa-times\" onClick={popClose}></i>\n        </div>\n        <h2>로그인을 해주세요.</h2>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginAlert;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport LoginAlert from './LoginAlert.jsx';\n\nconst Navbar = ({ loggedPopUp, popopen, popClose, loginpopEvent, isLoggedIn, alertMessageFormat, signAlert, onLoginButtonClick, onLogoutButtonClick, items}) => {\n  return (\n    <div className=\"container\">\n      <div className=\"navbar-start\">\n        <div className=\"nav-content\">\n          <div className=\"nav-menu\">\n            <dl>\n              <dt><Link onClick={alertMessageFormat} to=\"/\"><img src=\"https://github.com/seoksanghwan/videosConf---client/blob/master/src/img/logo.png?raw=true\" alt=\"\"/></Link></dt>\n              <dd>\n                <Link onClick={alertMessageFormat} to=\"/about\">About</Link>\n              </dd>\n              <dd>\n                {\n                  (isLoggedIn) ?\n                    <Link onClick={alertMessageFormat} to=\"/rooms\">Channel List</Link> :\n                    <p onClick={loginpopEvent}>Channel List</p>\n                }\n              </dd>\n              <dd>\n                {\n                  (isLoggedIn) ?\n                    <p onClick={onLogoutButtonClick}>Sign Out</p> :\n                    <p onClick={onLoginButtonClick}>Sign In</p>\n                }\n              </dd>\n            </dl>\n          </div>\n          <div className=\"user-info-nav\">\n            {\n              (isLoggedIn) ?\n                <p><img src={items.url} /> <strong>{items.name}</strong>님 안녕하세요.</p> :\n                <p>로그인을 해주세요.</p>\n            }\n          </div>\n        </div>\n      </div>\n      {\n        (loggedPopUp) ?\n          <LoginAlert popClose={popClose} /> :\n          null\n      }\n    </div>\n  );\n};\n\nexport default Navbar;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Alert from './Alert.jsx';\n\nconst About = ({ channelAlertMessage, goingRef, goingChannel, passCheckRef, passwordCheck, popClose, pass, focustitle, popopen, inputCancel, alertMessage, spinner, alertBoxBottom, alertColor }) => {\n\treturn (\n\t\t<div className=\"about\">\n\t\t\t<div className=\"about-content\">\n\t\t\t\t<div className=\"about-img\"></div>\n\t\t\t\t<div className=\"about-info-text\">\n\t\t\t\t\t<h2>Videos Conf</h2>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t언제 어디서든 노트북만 있으면, 화상회의를<br />시작하실 수 있습니다.\n\t\t\t\t\t\t지금 바로 시작해보세요.\n\t\t\t\t\t </p>\n\t\t\t\t\t<div className=\"goingChannel\">\n\t\t\t\t\t\t<label htmlFor=\"going_channel\">\n\t\t\t\t\t\t\t<input type=\"text\" id=\"going_channel\" name=\"going_channel\" ref={goingRef} placeholder=\"채널 제목을 입력해주세요!\" />\n\t\t\t\t\t\t\t<button name=\"going_channel\" onClick={goingChannel} >Go!</button>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tchannelAlertMessage ?\n\t\t\t\t\t\t\t\t\t<p className=\"goingChannel-Check-Message\" style={{ color: alertColor }}>{alertBoxBottom}</p> :\n\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{\n\t\t\t\t(popopen) ?\n\t\t\t\t\t<Alert alertColor={alertColor} alertBoxBottom={alertBoxBottom} spinner={spinner} alertMessage={alertMessage} passCheckRef={passCheckRef} passwordCheck={passwordCheck} popClose={popClose} pass={pass} focustitle={focustitle} inputCancel={inputCancel} /> :\n\t\t\t\t\tnull\n\t\t\t}\n\t\t</div>\n\t);\n};\n\nexport default About;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Link } from \"react-router-dom\";\nimport { uniqWith, isEqual } from \"lodash\";\nimport Alert from './Alert.jsx';\n\nconst Rooms = ({ deleteAelrt, spinner, roomDelete, roomData, passCheckRef, passwordCheck, items, popopen, popEvent, popClose, roomDeletePop, pass, focustitle, inputCancel, alertMessage, alertBoxBottom, alertColor }) => {\n  return (\n    <div className=\"rooms-list\">\n      <dl>\n        <dt>\n          <h2 className=\"title\">\n            Enjoy Channel!!\n            <em>안녕하세요 채널 리스트입니다.</em>\n          </h2>\n        </dt>\n        { \n          (roomData.length) ?\n          uniqWith(roomData, isEqual).map(data => {\n            return (\n              <dd key={data._id}>\n                <h3>\n                  {data.title}\n                  <p> Organiser {data.userName}</p>\n                </h3>\n                <div className=\"del-enter\">\n                  <button onClick={popEvent} data-id={data._id}>\n                    <i className=\"fas fa-sign-in-alt\" data-id={data._id}></i>\n                  </button>\n                  {\n                    (data.userName === items.name) ?\n                      <button onClick={roomDelete} data-mail={data.userMail} data-id={data._id} >\n                        <i className=\"fas fa-trash\" data-mail={data.userMail} data-id={data._id} ></i>\n                      </button> : null\n                  }\n                </div>\n              </dd>\n            );\n          }) :\n          <dd className=\"no-channel\">현재 채널이 없습니다. 생성해주세요. 🧐</dd>\n        }\n      </dl>\n      {\n        (popopen) ?\n          <Alert alertColor={alertColor} alertBoxBottom={alertBoxBottom} spinner={spinner} alertMessage={alertMessage} passCheckRef={passCheckRef} passwordCheck={passwordCheck} popClose={popClose} pass={pass} focustitle={focustitle} inputCancel={inputCancel} /> :\n          null\n      }\n      {\n        (deleteAelrt) ?\n          <div className=\"removeAlertBox\">\n            <div className=\"loginContent\">\n              <div className=\"close-btn\">\n                <i className=\"fas fa-times\" onClick={roomDeletePop}></i>\n              </div>\n              <h2>채널이 삭제 되었습니다.</h2>\n            </div>\n          </div> :\n          null\n      }\n    </div>\n  );\n};\n\nexport default Rooms;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { uniqWith, isEqual } from \"lodash\";\n\nexport default class RoomsDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.remoteVideos = {};\n  }\n\n  componentDidMount() {\n    const { room_name } = this.props.match.params;\n    this.webrtc = this.props.webrtc;\n    this.props.startLoclaVideo(this.localVideo);\n    this.props.AddpeerVideo(this.remoteVideos);\n    this.props.joinChat(room_name);\n  }\n\n  render() {\n    const { peers, email, url, AddpeerVideo, webrtc, disconnect, handleSelfMute, mute, connectVideo } = this.props;\n    const { room_name } = this.props.match.params;\n    return (\n      <div className=\"details-box\">\n        <div className=\"sidebar local\">\n          <h2>\n            {room_name}\n            <em><i className=\"far fa-user\"></i> {peers.length + 1}</em>\n          </h2>\n          <div className=\"localBox\">\n            <video id='localVideo' autoPlay={true} ref={(vid) => this.localVideo = vid} />\n            <div className=\"nick\">\n              <p> {email} </p>\n            </div>\n          </div>\n          <div className=\"buttons\">\n            <button onClick={connectVideo}>\n              <i className=\"fas fa-video\"></i>\n            </button>\n            <button onClick={handleSelfMute}>\n              {\n                (mute) ?\n                  <i className=\"fas fa-volume-up\"></i> :\n                  <i className=\"fas fa-volume-mute\"></i>\n              }\n            </button>\n            <button onClick={disconnect}>\n              <i className=\"fas fa-sign-out-alt\"></i>\n            </button>\n            <p>통화버튼을 눌러주세요.</p>\n          </div>\n          <div className=\"remotePeerList\">\n            <h3>Member</h3>\n            <ul>\n              <li> <img src={url} alt=\"\" /> <p>{email}</p></li>\n              {\n                peers.map(name => <li key={name.id}> <img src={name.nick.split(',')[1]} alt=\"\" /> <p>{name.nick.split(',')[0]}</p></li>)\n              }\n            </ul>\n          </div>\n        </div>\n        <div className=\"remotevideo\" >\n          {\n            uniqWith(peers, isEqual).map(data => (\n              <div className=\"vidContainer\" key={data.id} id={`${webrtc.getContainerId(data)}`} >\n                <video id={webrtc.getId(data)} autoPlay={true} ref={(vid) => this.remoteVideos[data.id] = vid} playsInline />\n                <div className=\"nick\">\n                  <p>{data.nick.split(',')[0]}</p>\n                </div>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    );\n  };\n};\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Main from './Main.jsx';\nimport Navbar from './Navbar.jsx';\nimport About from './About.jsx';\nimport Rooms from './Rooms.jsx';\nimport RoomsDetails from './RoomsDetails.jsx';\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    window.onpopstate = e => {\n      this.props.popClose();\n    }\n  }\n\n  componentDidUpdate() {\n    if (!this.props.location.pathname.split('/rooms/')[1]) {\n      this.disconnectSet();\n    }\n    this.props.roomMatch(this.props.isroom);\n  }\n\n  disconnectSet() {\n    this.props.webrtc.connection.disconnect();\n    this.props.webrtc.stopLocalVideo();\n    this.props.webrtc.leaveRoom();\n  }\n\n  connectVideo() {\n    this.props.history.go(0);\n  }\n\n  disconnect() {\n    this.props.history.push('/rooms');\n    this.props.alertMessageChange();\n    this.props.popClose();\n  }\n\n  render() {\n    const {\n      isLoggedIn,\n      inputRef,\n      goingRef,\n      items,\n      isroom,\n      init,\n      peers,\n      inroom,\n      webrtc,\n      saveFormData,\n      AddpeerVideo,\n      joinChat,\n      startLoclaVideo,\n      handleSelfMute,\n      goingChannel,\n      passRef,\n      passCheckRef,\n      passwordCheck,\n      pass,\n      mute,\n      popopen,\n      popEvent,\n      popClose,\n      focustitle,\n      inputCancel,\n      alertMessage,\n      spinner,\n      alertBoxBottom,\n      alertColor,\n      channelAlertMessage,\n      alertMessageFormat,\n      onLogoutButtonClick,\n      onLoginButtonClick,\n      signAlert,\n      loginpopEvent,\n      loggedPopUp,\n      deleteAelrt,\n      roomDeletePop } = this.props;\n    return (\n      <div id=\"app\" className=\"container\">\n        <Navbar\n          items={items}\n          loginpopEvent={loginpopEvent}\n          loggedPopUp={loggedPopUp}\n          isLoggedIn={isLoggedIn}\n          signAlert={signAlert}\n          onLoginButtonClick={onLoginButtonClick}\n          onLogoutButtonClick={onLogoutButtonClick}\n          alertMessageFormat={alertMessageFormat}\n          alertBoxBottom={alertBoxBottom}\n          popEvent={popEvent}\n          popClose={popClose}\n          popopen={popopen}\n        />\n        <Switch>\n          <Route exact path=\"/\" render={props => {\n            return (\n              <Main\n                {...props}\n                spinner={spinner}\n                isLoggedIn={isLoggedIn}\n                saveFormData={saveFormData}\n                inputRef={inputRef}\n                passRef={passRef}\n                pass={pass}\n                popEvent={popEvent}\n                popClose={popClose}\n                popopen={popopen}\n                passwordCheck={passwordCheck}\n                passCheckRef={passCheckRef}\n                focustitle={focustitle}\n                alertMessage={alertMessage}\n                alertBoxBottom={alertBoxBottom}\n                alertColor={alertColor}\n                channelAlertMessage={channelAlertMessage}\n              />\n            );\n          }} />\n          <Route exact path=\"/about\" render={props => {\n            return (\n              <About\n                {...props}\n                spinner={spinner}\n                goingRef={goingRef}\n                goingChannel={goingChannel}\n                pass={pass}\n                channelAlertMessage={channelAlertMessage}\n                popEvent={popEvent}\n                popClose={popClose}\n                popopen={popopen}\n                passwordCheck={passwordCheck}\n                passCheckRef={passCheckRef}\n                focustitle={focustitle}\n                inputCancel={inputCancel}\n                alertMessage={alertMessage}\n                alertBoxBottom={alertBoxBottom}\n                alertColor={alertColor}\n              />\n            );\n          }} />\n          <Route exact path=\"/rooms\" render={props => {\n            if (isLoggedIn) {\n              return (\n                <Rooms\n                  spinner={spinner}\n                  popClose={popClose}\n                  popopen={popopen}\n                  pass={pass}\n                  items={items}\n                  roomData={isroom}\n                  roomDelete={this.props.roomDelete}\n                  passCheckRef={passCheckRef}\n                  passwordCheck={passwordCheck}\n                  popEvent={popEvent}\n                  focustitle={focustitle}\n                  inputCancel={inputCancel}\n                  alertMessage={alertMessage}\n                  alertBoxBottom={alertBoxBottom}\n                  alertColor={alertColor}\n                  deleteAelrt={deleteAelrt}\n                  roomDeletePop={roomDeletePop}\n                />\n              );\n            } else {\n              return <Redirect to=\"/\" />;\n            }\n          }} />\n          <Route exact path=\"/rooms/:room_name\" render={props => {\n            let email = items.name ? items.name : 'null';\n            if (isLoggedIn && isroom) {\n              if (pass) {\n                return (\n                  <RoomsDetails\n                    {...props}\n                    init={init}\n                    email={email}\n                    url={items.url}\n                    peers={peers}\n                    webrtc={webrtc}\n                    inroom={inroom}\n                    isroom={isroom}\n                    startLoclaVideo={startLoclaVideo}\n                    AddpeerVideo={AddpeerVideo}\n                    joinChat={joinChat}\n                    mute={mute}\n                    pass={pass}\n                    connectVideo={this.connectVideo.bind(this)}\n                    disconnect={this.disconnect.bind(this)}\n                    handleSelfMute={handleSelfMute}\n                    localref={(vid) => this.localVideo = vid}\n                  />\n                );\n              } else {\n                alert('잘못된 접근입니다.');\n                return <Redirect to=\"/rooms\" />;\n              }\n            } else {\n              return <span>Loading...</span>;\n            }\n          }} />\n          <Route render={() => <Redirect to=\"/\" />} />\n        </Switch>\n      </div>\n    );\n  };\n};\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport axios from 'axios';\nimport Home from './Home.jsx';\nimport { throws } from 'assert';\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.props.usingUserData();\n    this.props.channelData();\n    this.props.init();\n    this.props.chatRoomUsing();\n  }\n\n  saveFormDatas(event) {\n    event.preventDefault();\n    const { isLoggedIn, items, isroom } = this.props;\n    const channelTitle = this.inputNode.value\n    const channelPassword = this.passNode.value\n    this.props.saveFormData(isLoggedIn, items, channelTitle, channelPassword, isroom, this.props.aboutPopEvent);\n    this.props.MainAlertMessageChange();\n    this.inputNode.value = '';\n    this.passNode.value = '';\n  }\n\n  roomDeletes(event) {\n    event.preventDefault();\n    const dataId = event.target.dataset.id;\n    this.props.roomDelete(dataId);\n  }\n\n  goingChannel(event) {\n    event.preventDefault();\n    const channelTitle = this.gochannel.value;\n    const { isLoggedIn, isroom } = this.props;\n    const titleEqualCheck = isroom.filter(data => data.title === channelTitle)[0]\n    this.props.goingChannels(isLoggedIn, channelTitle, isroom, titleEqualCheck, this.props.aboutPopEvent)\n    this.props.aboutAlertMessageChange();\n    this.gochannel.value = '';\n  }\n\n  passwordCheck(event) {\n    event.preventDefault();\n    const dataTite = this.props.aboutValueTitle;\n    const dataId = this.props.focusid;\n    const passCheck = this.checkNode.value;\n    const { isroom } = this.props;\n    this.props.passpostCheck(passCheck, dataId, isroom, dataTite, event)\n  }\n\n  render() {\n    const {\n      isLoggedIn,\n      items,\n      isroom,\n      peers,\n      inroom,\n      webrtc,\n      joinChat,\n      AddpeerVideo,\n      startLoclaVideo,\n      handleSelfMute,\n      mute,\n      pass,\n      history,\n      popopen,\n      channelcheck,\n      popEvent,\n      popClose,\n      passpostCheck,\n      focustitle,\n      roomMatch,\n      alertHide,\n      inputCancel,\n      formatRoomPassword,\n      alertMessage,\n      loginUser,\n      userlogout,\n      aboutAlertMessageChange,\n      spinner,\n      alertBoxBottom,\n      alertColor,\n      channelAlertMessage,\n      alertMessageFormat,\n      loginpopEvent,\n      loggedPopUp,\n      deleteAelrt,\n      roomDeletePop } = this.props;\n    return (\n      <Router>\n        <Route\n          render={props => {\n            if (isroom) {\n              return (\n                (webrtc !== null) ?\n                  <Home\n                    {...props}\n                    isLoggedIn={isLoggedIn}\n                    items={items}\n                    isroom={isroom}\n                    channelcheck={channelcheck}\n                    alertMessageFormat={alertMessageFormat}\n                    saveFormData={this.saveFormDatas.bind(this)}\n                    roomDelete={this.roomDeletes.bind(this)}\n                    roomDeletePop={roomDeletePop.bind(this)}\n                    goingChannel={this.goingChannel.bind(this)}\n                    passwordCheck={this.passwordCheck.bind(this)}\n                    formatRoomPassword={formatRoomPassword}\n                    handleSelfMute={handleSelfMute.bind(this)}\n                    inputCancel={inputCancel.bind(this)}\n                    passpostCheck={passpostCheck}\n                    popEvent={popEvent.bind(this)}\n                    loginpopEvent={loginpopEvent.bind(this)}\n                    loggedPopUp={loggedPopUp}\n                    popClose={popClose}\n                    focustitle={focustitle}\n                    alertHide={alertHide}\n                    alertColor={alertColor}\n                    alertBoxBottom={alertBoxBottom}\n                    onLoginButtonClick={loginUser}\n                    onLogoutButtonClick={userlogout}\n                    signAlert={this.signAlertMessage}\n                    alertMessageChange={aboutAlertMessageChange}\n                    webrtc={webrtc}\n                    peers={peers}\n                    inroom={inroom}\n                    pass={pass}\n                    roomMatch={roomMatch}\n                    channelAlertMessage={channelAlertMessage}\n                    startLoclaVideo={startLoclaVideo}\n                    AddpeerVideo={AddpeerVideo}\n                    mute={mute}\n                    loginpopEvent={loginpopEvent}\n                    popopen={popopen}\n                    joinChat={joinChat}\n                    alertMessage={alertMessage}\n                    spinner={spinner}\n                    deleteAelrt={deleteAelrt}\n                    inputRef={value => this.inputNode = value}\n                    goingRef={value => this.gochannel = value}\n                    passRef={value => this.passNode = value}\n                    passCheckRef={value => this.checkNode = value}\n                  /> :\n                  <div className=\"loadspin\"></div>\n              )\n            }\n          }}\n        />\n      </Router>\n    );\n  };\n};\n","import * as firebase from 'firebase';\n\n var config = {\n  apiKey: \"AIzaSyA2aWhmtwcW-HJ80tYyv1Hs2A9MRzY3acQ\",\n  authDomain: \"videoconference-bf935.firebaseapp.com\",\n  databaseURL: \"https://videoconference-bf935.firebaseio.com\",\n  projectId: \"videoconference-bf935\",\n  storageBucket: \"videoconference-bf935.appspot.com\",\n  messagingSenderId: \"895553387250\"\n};\nfirebase.initializeApp(config);\n\nexport default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport reducer from './reducers'\nimport App from './containers/App.jsx';\nimport './style.css';\nimport './service/firebase';\nimport createHistory from 'history/createBrowserHistory';\n\nconst history = createHistory({ forceRefresh: true });\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\t\n    <App history={history}/>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}