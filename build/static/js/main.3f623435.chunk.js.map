{"version":3,"sources":["actions/index.js","reducers/index.js","containers/App.jsx","components/Alert.jsx","components/Main.jsx","components/LoginAlert.jsx","components/Navbar.jsx","components/About.jsx","components/Rooms.jsx","components/RoomsDetails.jsx","components/Home.jsx","components/App.jsx","service/firebase.js","index.js"],"names":["IS_LOGIN_USER","FETCH_PRODUCTS_BEGIN","GET_ERRORS","IS_LOGGED_IN_DATA","IS_LOGOUT_DATA","ROOMS_DATA","RTC_SETTING","ADD_MEDIA","REMOVE_VIDEO","READY_TO_CALL","LOCAL_VIDEO","CONNECTED_LOCAL","DISCONNECTED_WEBCAM","AUDIO_CHECK","ROOM_ADD","ROOM_REMOVE","CHANNEL_CHECK","PASSWORD_CHECK","POP_EVENT_CHECK","POP_ClOSE_CHECK","ROOM_MAINTENANCE","ROOM_TITLE_MATCH","FORMAT_ROOM_PASS","ALERT_MESSAGE_CHANGE","SPINNER_ACTION","ALERT_WARNING","LOGGIN_POP_OPEN","ROOM_REMOVE_POP","initialState","items","isLoggedIn","error","isroom","peers","inroom","webrtc","roomname","mute","length","pass","popopen","focusid","focustitle","aboutValueTitle","alertMessage","spinner","alertBoxBottom","alertColor","channelAlertMessage","loggedPopUp","deleteAelrt","rtc","Alert","_ref","gochnanelRoom","passCheckRef","passwordCheck","popClose","inputCancel","react_default","a","createElement","className","onClick","htmlFor","type","name","ref","placeholder","autoFocus","style","color","Main","saveFormData","inputRef","passRef","src","alt","id","components_Alert","LoginAlert","Navbar","loginpopEvent","alertMessageFormat","onLoginButtonClick","signAlert","onLogoutButtonClick","Link","to","url","components_LoginAlert","About","goingRef","goingChannel","Rooms","roomDelete","roomData","popEvent","roomDeletePop","uniqWith","isEqual","map","data","key","_id","title","userName","data-id","data-mail","userMail","RoomsDetails","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","remoteVideos","room_name","match","params","startLoclaVideo","localVideo","AddpeerVideo","joinChat","_this2","_this$props","email","disconnect","handleSelfMute","autoPlay","vid","nick","split","concat","getContainerId","getId","playsInline","Component","Home","window","onpopstate","e","location","pathname","disconnectSet","roomMatch","connection","stopLocalVideo","leaveRoom","history","push","alertMessageChange","init","components_Navbar","Switch","Route","exact","path","render","components_Main","assign","components_About","components_Rooms","Redirect","RoomsDetails_RoomsDetails","bind","localref","alert","React","App","usingUserData","channelData","chatRoomUsing","event","preventDefault","channelTitle","inputNode","value","channelPassword","passNode","aboutPopEvent","MainAlertMessageChange","dataId","target","dataset","gochannel","_this$props2","titleEqualCheck","filter","goingChannels","aboutAlertMessageChange","dataTite","passCheck","checkNode","passpostCheck","goMoveChannel","_this$props3","channelcheck","alertHide","formatRoomPassword","loginUser","userlogout","BrowserRouter","_Object$assign","Home_Home","saveFormDatas","roomDeletes","signAlertMessage","defineProperty","localHostIp","localHostIpApi","provider","firebase","GoogleAuthProvider","createHistory","forceRefresh","socket","io","removeData","dispatch","roomDataRmove","localStorage","removeItem","connect","state","ownProps","user","signInWithPopup","then","result","credential","accessToken","users","uid","displayName","photoURL","axios","post","res","token","defaults","headers","common","setAuthToken","decoded","jwt_decode","setItem","JSON","stringify","resultBoolean","catch","parse","getItem","userRemove","signOut","on","logedin","roomPassword","callback","titleOverLap","Boolean","every","roommData","emit","booelan","undefined","channelName","deleteMsg","localele","LioWebRTC","localVideoEl","dataOnly","network","maxPeers","minPeers","debug","sessionId","peer","payload","localvideo","start","startLocalVideo","config","targetremote","stream","attachStream","autoplay","joinroom","joinRoom","func","password","roomid","check","item","inputdata","shouldCheck","message","roomObj","roomTitle","targetTitle","popBoolean","isroomdata","roomTitleUrl","isRoomValid","some","roomBoolean","withref","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","store","createStore","arguments","action","objectSpread","islogedin","loggedTrue","roomCopy","toConsumableArray","dataroom","peerCopy","p","closed","unmute","removeRoom","roomId","removeUpdate","applyMiddleware","logger","ReactDOM","react_redux_es","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.3f623435.chunk.js","sourcesContent":["export const IS_LOGIN_USER = 'IS_LOGIN_USER';\nexport const FETCH_PRODUCTS_BEGIN = 'FETCH_PRODUCTS_BEGIN';\nexport const GET_ERRORS = 'GET_ERRORS';\nexport const IS_LOGGED_IN_DATA = 'IS_LOGGED_IN_DATA';\nexport const IS_LOGOUT_DATA = 'IS_LOGOUT_DATA';\nexport const ROOMS_DATA = 'ROOMS_DATA';\nexport const RTC_SETTING = 'RTC_SETTING';\nexport const ADD_MEDIA = 'ADD_MEDIA';\nexport const REMOVE_VIDEO = 'REMOVE_VIDEO';\nexport const READY_TO_CALL = 'READY_TO_CALL';\nexport const LOCAL_VIDEO = 'LOCAL_VDIEO';\nexport const CONNECTED_LOCAL = 'CONNECTED_LOCAL';\nexport const DISCONNECTED_WEBCAM = 'DISCONNECTED_WEBCAM';\nexport const AUDIO_CHECK = 'AUDIO_CHECK';\nexport const ROOM_ADD = 'ROOM_ADD';\nexport const ROOM_REMOVE = 'ROOM_REMOVE';\nexport const CHANNEL_CHECK = 'CHANNEL_CHECK';\nexport const PASSWORD_CHECK = 'PASSWORD_CHECK';\nexport const POP_EVENT_CHECK = 'POP_EVENT_CHECK';\nexport const POP_ClOSE_CHECK = 'POP_ClOSE_CHECK';\nexport const ROOM_MAINTENANCE = 'ROOM_MAINTENANCE';\nexport const ROOM_TITLE_MATCH = 'ROOM_TITLE_MATCH';\nexport const FORMAT_ROOM_PASS = 'FORMAT_ROOM_PASS';\nexport const ALERT_MESSAGE_CHANGE = 'ALERT_MESSAGE_CHANGE';\nexport const SPINNER_ACTION = 'SPINNER_ACTION';\nexport const ALERT_WARNING = 'ALERT_WARNING';\nexport const LOGGIN_POP_OPEN = 'LOGGIN_POP_OPEN';\nexport const ROOM_REMOVE_POP = 'ROOM_REMOVE_POP';\n\nexport const isLogoutData = () => ({\n  type: IS_LOGOUT_DATA\n});\n\nexport const isLoggedInData = () => ({\n  type: IS_LOGGED_IN_DATA\n});\n\nexport const fetchProductsBegin = () => ({\n  type: FETCH_PRODUCTS_BEGIN\n});\n\nexport const getErrors = () => ({\n  type: GET_ERRORS\n});\n\nexport const roomdData = () => ({\n  type: ROOMS_DATA\n});\n\nexport const isLoginUser = products => ({\n  type: IS_LOGIN_USER\n});\n\n/* video RTC */\nexport const rtcSetting = products => ({\n  type: RTC_SETTING\n});\n\nexport const addMeida = products => ({\n  type: ADD_MEDIA\n});\n\nexport const removeVideo = products => ({\n  type: REMOVE_VIDEO\n});\n\nexport const readyToCall = products => ({\n  type: READY_TO_CALL\n});\n\nexport const localVideo = products => ({\n  type: LOCAL_VIDEO\n});\n\nexport const connectedLocal = products => ({\n  type: CONNECTED_LOCAL\n});\n\nexport const disconnectedWebcam = products => ({\n  type: DISCONNECTED_WEBCAM\n});\n\nexport const audioCheck = products => ({\n  type: AUDIO_CHECK\n});\n\nexport const roomAdd = products => ({\n  type: ROOM_ADD\n});\n\nexport const roomRemove = products => ({\n  type: ROOM_REMOVE\n});\n\nexport const channelCheck = products => ({\n  type: CHANNEL_CHECK\n});\n\nexport const passwordCheck = products => ({\n  type: PASSWORD_CHECK\n});\n\nexport const popEventCheck = products => ({\n  type: POP_EVENT_CHECK\n});\n\nexport const popCloseCheck = products => ({\n  type: POP_ClOSE_CHECK\n});\n\nexport const roomMaintenance = products => ({\n  type: ROOM_MAINTENANCE\n});\n\nexport const roomMatchTtile = products => ({\n  type: ROOM_TITLE_MATCH\n});\n\nexport const formatRoomPass = products => ({\n  type: FORMAT_ROOM_PASS\n});\n\nexport const alertMessageChange = products => ({\n  type: ALERT_MESSAGE_CHANGE\n});\n\nexport const spinnerAction = products => ({\n  type: SPINNER_ACTION\n});\n\nexport const alertWarning = products => ({\n  type: ALERT_WARNING\n});\n\nexport const loginPopOpen = products => ({\n  type: LOGGIN_POP_OPEN\n});\n\nexport const roomRemovePop = products => ({\n  type: ROOM_REMOVE_POP\n});\n","import LioWebRTC from 'liowebrtc';\nimport { combineReducers } from 'redux';\nimport createHistory from 'history/createBrowserHistory';\nimport {\n\tFETCH_PRODUCTS_BEGIN,\n\tIS_LOGIN_USER,\n\tIS_LOGGED_IN_DATA,\n\tIS_LOGOUT_DATA,\n\tGET_ERRORS,\n\tROOMS_DATA,\n\tRTC_SETTING,\n\tCONNECTED_LOCAL,\n\tLOCAL_VIDEO,\n\tADD_MEDIA,\n\tREMOVE_VIDEO,\n\tREADY_TO_CALL,\n\tDISCONNECTED_WEBCAM,\n\tAUDIO_CHECK,\n\tROOM_ADD,\n\tROOM_REMOVE,\n\tCHANNEL_CHECK,\n\tPASSWORD_CHECK,\n\tPOP_EVENT_CHECK,\n\tPOP_ClOSE_CHECK,\n\tROOM_MAINTENANCE,\n\tROOM_TITLE_MATCH,\n\tFORMAT_ROOM_PASS,\n\tALERT_MESSAGE_CHANGE,\n\tSPINNER_ACTION,\n\tALERT_WARNING,\n\tLOGGIN_POP_OPEN,\n\tROOM_REMOVE_POP\n} from '../actions';\n\nconst initialState = {\n\titems: {},\n\tisLoggedIn: false,\n\terror: null,\n\tisroom: [],\n\tpeers: [],\n\tinroom: false,\n\twebrtc: null,\n\troomname: '',\n\tmute: false,\n\tlength: 0,\n\tpass: false,\n\tpopopen: false,\n\tfocusid: '',\n\tfocustitle: '',\n\taboutValueTitle: '',\n\talertMessage: '회의실 패스워드를 입력해주세요.',\n\tspinner: false,\n\talertBoxBottom: '',\n\talertColor: '#3c29aa',\n\tchannelAlertMessage: false,\n\tloggedPopUp: false,\n\tdeleteAelrt: false\n};\n\nexport default function productReducer(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase FETCH_PRODUCTS_BEGIN:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tislogedin: false,\n\t\t\t\titems: {},\n\t\t\t\tisroom: []\n\t\t\t};\n\n\t\tcase IS_LOGIN_USER:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoggedIn: true,\n\t\t\t\titems: action.data\n\t\t\t};\n\n\t\tcase IS_LOGGED_IN_DATA:\n\t\t\tlet user = Boolean(action.data) ? action.data : {};\n\t\t\tlet loggedTrue = Boolean(action.data) ? true : false;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoggedIn: loggedTrue,\n\t\t\t\titems: user\n\t\t\t}\n\n\t\tcase IS_LOGOUT_DATA:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoggedIn: false,\n\t\t\t\titems: {}\n\t\t\t}\n\n\t\tcase ROOMS_DATA:\n\t\t\tlet roomCopy = [...action.data, ...state.isroom];\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisroom: roomCopy\n\t\t\t}\n\n\t\tcase ROOM_ADD:\n\t\t\tconst dataroom = [...state.isroom, action.data];\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisroom: dataroom\n\t\t\t}\n\n\t\tcase ROOM_REMOVE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdeleteAelrt: action.deleteMsg\n\t\t\t}\n\n\t\tcase RTC_SETTING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\twebrtc: action.payload\n\t\t\t};\n\n\t\tcase ADD_MEDIA:\n\t\t\tlet peerCopy = [...state.peers, action.peer];\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpeers: peerCopy\n\t\t\t};\n\n\t\tcase REMOVE_VIDEO:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpeers: state.peers.filter(p => !p.closed)\n\t\t\t};\n\n\t\tcase READY_TO_CALL:\n\t\t\treturn {\n\t\t\t\t...state\n\t\t\t};\n\n\t\tcase LOCAL_VIDEO:\n\t\t\treturn {\n\t\t\t\t...state\n\t\t\t};\n\n\t\tcase CONNECTED_LOCAL:\n\t\t\treturn {\n\t\t\t\t...state\n\t\t\t};\n\n\t\tcase DISCONNECTED_WEBCAM:\n\t\t\treturn {\n\t\t\t\t...state\n\t\t\t};\n\n\t\tcase AUDIO_CHECK:\n\t\t\t(state.mute) ? action.func.unmute() : action.func.mute();\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmute: !state.mute\n\t\t\t};\n\n\t\tcase CHANNEL_CHECK:\n\t\t\treturn {\n\t\t\t\t...state\n\t\t\t}\n\n\t\tcase PASSWORD_CHECK:\n\t\t\tif (action.result) {\n\t\t\t\tstate.inroom = true\n\t\t\t} else {\n\t\t\t\tstate.inroom = false\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpass: action.result,\n\t\t\t\tfocustitle: action.title,\n\t\t\t\tspinner: false\n\t\t\t}\n\n\t\tcase POP_EVENT_CHECK:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpopopen: action.booelan,\n\t\t\t\tfocusid: action.dataId,\n\t\t\t\taboutValueTitle: action.targetTitle\n\t\t\t}\n\n\t\tcase FORMAT_ROOM_PASS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpass: action.pass\n\t\t\t}\n\n\t\tcase POP_ClOSE_CHECK:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpopopen: action.booelan,\n\t\t\t\tloggedPopUp: action.popBoolean,\n\t\t\t\tdeleteAelrt: action.deleteMsg\n\t\t\t}\n\n\t\tcase ROOM_MAINTENANCE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpopopen: action.booelan,\n\t\t\t\tpass: action.data\n\t\t\t}\n\n\t\tcase ROOM_TITLE_MATCH:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tinroom: action.roomBoolean\n\t\t\t}\n\n\t\tcase ALERT_MESSAGE_CHANGE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\talertMessage: action.message\n\t\t\t}\n\n\t\tcase SPINNER_ACTION:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tspinner: action.check\n\t\t\t}\n\n\t\tcase ALERT_WARNING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\talertBoxBottom: action.alert,\n\t\t\t\talertColor: action.color,\n\t\t\t\tchannelAlertMessage: action.resultBoolean\n\t\t\t}\n\n\t\tcase ROOM_REMOVE_POP:\n\t\t\tconst removeRoom = state.isroom;\n\t\t\tconst roomId = action.data;\n\t\t\tconst removeUpdate = removeRoom.filter((data) => roomId !== data._id);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisroom: removeUpdate,\n\t\t\t\tdeleteAelrt: action.deleteMsg\n\t\t\t}\t\n\n\t\tcase LOGGIN_POP_OPEN:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloggedPopUp : action.popBoolean\n\t\t\t}\n\t\t\t\n\t\tcase GET_ERRORS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\titems: {},\n\t\t\t\tisLoggedIn: false\n\t\t\t}\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import { connect } from \"react-redux\";\nimport io from 'socket.io-client';\nimport { bindActionCreators } from 'redux'\nimport React, { Component } from 'react';\nimport { debounce } from \"lodash\";\nimport * as firebase from 'firebase';\nimport LioWebRTC from 'liowebrtc';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nimport {\n  IS_LOGIN_USER,\n  IS_LOGGED_IN_DATA,\n  IS_LOGOUT_DATA,\n  GET_ERRORS,\n  ROOMS_DATA,\n  CONNECTED_LOCAL,\n  LOCAL_VIDEO,\n  RTC_SETTING,\n  ADD_MEDIA,\n  REMOVE_VIDEO,\n  READY_TO_CALL,\n  AUDIO_CHECK,\n  ROOM_ADD,\n  ROOM_REMOVE,\n  CHANNEL_CHECK,\n  PASSWORD_CHECK,\n  POP_EVENT_CHECK,\n  POP_ClOSE_CHECK,\n  ROOM_MAINTENANCE,\n  ROOM_TITLE_MATCH,\n  FORMAT_ROOM_PASS,\n  ALERT_MESSAGE_CHANGE,\n  SPINNER_ACTION,\n  ALERT_WARNING,\n  LOGGIN_POP_OPEN,\n  ROOM_REMOVE_POP\n} from '../actions';\nimport App from \"../components/App.jsx\";\nimport createHistory from 'history/createBrowserHistory';\n\nlet rtc;\nconst simpLioRTC = 'https://sm1.lio.app:443/';\nconst localHostIp = 'https://videos-conf-service.herokuapp.com/';\nconst localHostIpApi = `${localHostIp}api/auth/`;\nconst provider = new firebase.auth.GoogleAuthProvider();\nconst history = createHistory({ forceRefresh: true });\nconst socket = io(localHostIp);\nconst setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = token;\n  }\n  else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\n\nconst removeData = (dispatch) => {\n  let roomDataRmove = localStorage.removeItem('roomPassResults');\n  let roomNull = roomDataRmove === null ? false : null\n  dispatch({\n    type: ROOM_MAINTENANCE,\n    data: roomNull\n  });\n}\n\nconst mapStateToProps = state => ({\n  items: state.items,\n  isLoggedIn: state.isLoggedIn,\n  error: state.error,\n  isroom: state.isroom,\n  inroom: state.inroom,\n  peers: state.peers,\n  webrtc: state.webrtc,\n  mute: state.mute,\n  length: state.length,\n  popopen: state.popopen,\n  focusid: state.focusid,\n  pass: state.pass,\n  focustitle: state.focustitle,\n  aboutValueTitle: state.aboutValueTitle,\n  alertMessage: state.alertMessage,\n  spinner: state.spinner,\n  alertBoxBottom: state.alertBoxBottom,\n  alertColor: state.alertColor,\n  channelAlertMessage : state.channelAlertMessage,\n  loggedPopUp : state.loggedPopUp,\n  deleteAelrt : state.deleteAelrt\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    loginUser: (user) => {\n      firebase.auth().signInWithPopup(provider).then(result => {\n        let token = result.credential.accessToken;\n        let users = result.user;\n        let loginUser = {\n          uid: users.uid,\n          name: users.displayName,\n          url: users.photoURL,\n          email: users.email\n        }\n        axios.post(`${localHostIpApi}login`, loginUser).then(res => {\n          const { token } = res.data;\n          setAuthToken(token);\n          const decoded = jwt_decode(token);\n          dispatch({\n            type: IS_LOGIN_USER,\n            data: decoded\n          });\n          localStorage.setItem('user', JSON.stringify(decoded));\n        });\n        dispatch({\n          type: ALERT_WARNING,\n          alert: '패스워드를 입력해주세요.',\n          color: '#3f46ad',\n          resultBoolean : false\n        });\n      }).catch(error => {\n        dispatch({ type: GET_ERRORS, error });\n      });\n    },\n    usingUserData: () => {\n      let user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: IS_LOGGED_IN_DATA,\n        data: user\n      });\n    },\n    userlogout: () => {\n      let userRemove = localStorage.removeItem('user');\n      firebase.auth().signOut().then(() => {\n        dispatch({\n          type: IS_LOGOUT_DATA,\n          data: userRemove\n        });\n        dispatch({\n          type: ALERT_WARNING,\n          alert: '패스워드를 입력해주세요.',\n          color: '#3f46ad',\n          resultBoolean : false\n        });\n      }).catch(error => {\n        dispatch({ type: GET_ERRORS, error });\n      });\n    },\n    channelData: () => {\n      socket.on('initialList', (data) => {\n        dispatch({\n          type: ROOMS_DATA,\n          data\n        });\n      });\n      socket.on('itemAdded', (data) => {\n        dispatch({\n          type: ROOM_ADD,\n          data\n        });\n      });\n      socket.on('itemRemove', (data) => {\n        dispatch({\n          type: ROOM_REMOVE_POP,\n          data\n        });\n      });\n    },\n    saveFormData: (logedin, items, title, roomPassword, isroom, callback) => {\n      removeData(dispatch)\n      let titleOverLap = Boolean(isroom.every(roommData => roommData.title !== title));\n      if (logedin) {\n        if (title.length > 1 && title.length < 11 && roomPassword.length > 1 && roomPassword.length < 11) {\n          let data = {\n            title,\n            roomPassword,\n            userName: items.name,\n            userMail: items.email\n          };\n          dispatch({\n            type: ALERT_WARNING,\n            alert: '패스워드를 입력해주세요.',\n            color: '#3f46ad',\n            resultBoolean : false\n          });\n          if (titleOverLap || isroom === []) {\n            socket.emit('addItem', data);\n            dispatch({\n              type: POP_EVENT_CHECK,\n              booelan: true,\n              title\n            })\n            callback(title)\n          } else {\n            dispatch({\n              type: ALERT_WARNING,\n              alert: '중복된 채널이 있습니다.',\n              color: '#e30641',\n              resultBoolean : true\n            });\n          }\n        } else {\n          dispatch({\n            type: ALERT_WARNING,\n            alert: '채널 제목 및 패스워드는 2글자 이상 11글자 미만이에요.\\n다시 한번 작성해주세요',\n            color: '#e30641',\n            resultBoolean : true\n          });\n        }\n      } else {\n        dispatch({\n          type: ALERT_WARNING,\n          alert: '로그인을 해주셔야, 채널을 생성 하실 수 있습니다.',\n          color: '#e30641',\n          resultBoolean : true\n        });\n      }\n    },\n    goingChannels: (isLoggedIn, channelTitle, isroom, titleEqualCheck, callback) => {\n      removeData(dispatch)\n      if (isLoggedIn) {\n        if (channelTitle.length > 1 && channelTitle.length < 11) {\n          if (titleEqualCheck !== undefined) {\n            if (titleEqualCheck.title === channelTitle) {\n              callback(channelTitle);\n              dispatch({\n                type: ALERT_WARNING,\n                alert: '패스워드를 입력해주세요.',\n                color: '#3f46ad',\n                resultBoolean : false\n              });\n            }\n          } else {\n            dispatch({\n              type: ALERT_WARNING,\n              alert: '채널 목록에 없는 채널입니다.',\n              color: '#e30641',\n              resultBoolean : true\n            });\n          }\n        } else {\n          dispatch({\n            type: ALERT_WARNING,\n            alert: '채널 제목은 2글자 미만이거나, 11글자 이상 일 수 없습니다.',\n            color: '#e30641',\n            resultBoolean : true\n          });\n        }\n      } else {\n        dispatch({\n          type: ALERT_WARNING,\n          alert: '로그인을 해주셔야, 채널에 입장 하실 수 있습니다.',\n          color: '#e30641',\n          resultBoolean : true\n        });\n      }\n    },\n    goMoveChannel: (channelName) => {\n      history.push(`/rooms/${channelName}`)\n    },\n    roomDelete: (id) => {\n      localStorage.setItem('roomObjId', JSON.stringify(id));\n      dispatch({\n        type: ROOM_REMOVE,\n        deleteMsg : true\n      });\n    },\n    roomDeletePop: () => {\n      const id = JSON.parse(localStorage.getItem('roomObjId'));\n      dispatch({\n        type: ROOM_REMOVE_POP,\n        deleteMsg : false\n      });\n      socket.emit('removeItem', id);\n    },\n    init: (localele) => {\n      let user = JSON.parse(localStorage.getItem('user'));\n      let email = (user !== null) ? `${user.name},${user.url}` : 'Not user';\n      rtc = new LioWebRTC({\n        url: simpLioRTC,\n        localVideoEl: '',\n        dataOnly: false,\n        network: {\n          maxPeers: 2,\n          minPeers: 1\n        },\n        debug: false,\n        nick: email\n      });\n      rtc\n        .on('connectionReady', (sessionId) => {\n          dispatch({\n            type: CONNECTED_LOCAL,\n            sessionId\n          });\n        })\n        .on('videoRemoved', (peer) => {\n          dispatch({\n            type: REMOVE_VIDEO,\n            peer\n          });\n        });\n      dispatch({ type: RTC_SETTING, payload: rtc });\n    },\n    startLoclaVideo: (localvideo) => {\n      dispatch({ type: LOCAL_VIDEO, start: rtc.startLocalVideo() });\n      if (localvideo) {\n        rtc.config.localVideoEl = localvideo;\n      } else {\n        rtc.config.localVideoEl = localvideo;\n      }\n    },\n    AddpeerVideo: (targetremote) => {\n      rtc.on('videoAdded', (stream, peer) => {\n        if (targetremote) {\n          dispatch({\n            type: ADD_MEDIA,\n            peer,\n            rtc\n          });\n          rtc.attachStream(stream, targetremote[peer.id], { autoplay: true });\n        }\n      })\n    },\n    joinChat: (roomname) => {\n      rtc.on('readyToCall', () => {\n        if (roomname !== undefined) {\n          dispatch({\n            type: READY_TO_CALL,\n            joinroom: rtc.joinRoom(roomname)\n          });\n        }\n      });\n    },\n    handleSelfMute: (e) => {\n      dispatch({\n        type: AUDIO_CHECK,\n        func: rtc\n      });\n    },\n    passpostCheck: (password, roomid, isroom, dataTite, event) => {\n      event.preventDefault();\n      dispatch({\n        type: SPINNER_ACTION,\n        check: true\n      });\n      isroom.filter(item => {\n        if (item._id === roomid || item.title === dataTite) {\n          if (password.length >= 1) {\n            const inputdata = {\n              password,\n              roomid: item._id\n            }\n            axios.post(`${localHostIp}passcheck`, inputdata)\n              .then(data => {\n                const shouldCheck = data.data.message;\n                dispatch({\n                  type: PASSWORD_CHECK,\n                  result: shouldCheck,\n                  title: item.title\n                })\n                const roomObj = {\n                  item,\n                  shouldCheck\n                }\n                if (shouldCheck === true) {\n                  localStorage.setItem('roomPassResults', JSON.stringify(roomObj));\n                  dispatch({\n                    type: ALERT_WARNING,\n                    alert: '패스워드를 입력해주세요.',\n                    color: '#3f46ad'\n                  });\n                } else {\n                  localStorage.setItem('roomPassResults', JSON.stringify(roomObj));\n                  dispatch({\n                    type: SPINNER_ACTION,\n                    check: false\n                  });\n                  dispatch({\n                    type: ALERT_WARNING,\n                    alert: '패스워드를 잘못 입력하셨습니다.',\n                    color: '#e30641'\n                  });\n                }\n              })\n              .catch(error => {\n                dispatch({ type: GET_ERRORS, error });\n              });\n          } else {\n            dispatch({\n              type: SPINNER_ACTION,\n              check: false\n            });\n            dispatch({\n              type: ALERT_WARNING,\n              alert: '패스워드가 입력되지 않았습니다.',\n              color: '#e30641'\n            });\n          }\n        }\n      });\n    },\n    chatRoomUsing: () => {\n      let roomData = JSON.parse(localStorage.getItem('roomPassResults'));\n      let roomTitle = history.location.pathname.split('/rooms/')[1];\n      if (roomTitle !== undefined && roomData !== null) {\n        if (history.location.pathname.split('/rooms/')[1] && roomData !== null) {\n          if (roomTitle === roomData.item.title && roomData.shouldCheck) {\n            dispatch({\n              type: ROOM_MAINTENANCE,\n              data: roomData.shouldCheck\n            });\n          } else {\n            dispatch({\n              type: ROOM_MAINTENANCE,\n              data: false\n            });\n          }\n        }\n      }\n    },\n    popEvent: (event) => {\n      const dataId = event.target.dataset.id;\n      dispatch({\n        type: POP_EVENT_CHECK,\n        booelan: true,\n        dataId\n      });\n      dispatch({\n        type: ALERT_MESSAGE_CHANGE,\n        message: `채널 패스워드를 입력해주세요.`\n      });\n      dispatch({\n        type: ALERT_WARNING,\n        alert: '채널 패스워드를 입력해주세요.',\n        color: '#3f46ad'\n      });\n    },\n    aboutPopEvent: (targetTitle) => {\n      dispatch({\n        type: POP_EVENT_CHECK,\n        booelan: true,\n        targetTitle\n      });\n    },\n    popClose: () => {\n      removeData(dispatch)\n      dispatch({\n        type: POP_ClOSE_CHECK,\n        booelan: false,\n        popBoolean : false,\n        deleteMsg : false\n      });\n      dispatch({\n        type: ALERT_WARNING,\n        alert: '패스워드를 입력해주세요.',\n        color: '#3f46ad',\n        resultBoolean : false\n      });\n    },\n    inputCancel: () => {\n      dispatch({\n        type: POP_ClOSE_CHECK,\n        booelan: false\n      });\n    },\n    formatRoomPassword: () => {\n      let roomDataRmove = localStorage.removeItem('roomPassResults');\n      if (history.location.pathname.split('/rooms/')[1]) {\n        dispatch({\n          type: FORMAT_ROOM_PASS,\n          data: null,\n          pass: true\n        });\n      }\n    },\n    roomMatch: (isroomdata) => {\n      let roomTitleUrl = history.location.pathname.split('/rooms/')[1];\n      if (history.location.pathname.split('/rooms/')[1]) {\n        let title = isroomdata.map(data => data.title);\n        let isRoomValid = title.some(item => item === roomTitleUrl);\n        if (isRoomValid) {\n          dispatch({\n            type: ROOM_TITLE_MATCH,\n            roomBoolean: true\n          });\n        } else {\n          dispatch({\n            type: ROOM_TITLE_MATCH,\n            roomBoolean: false\n          });\n        }\n      }\n    },\n    MainAlertMessageChange: () => {\n      dispatch({\n        type: ALERT_MESSAGE_CHANGE,\n        message: '채널이 생성되었습니다.\\n지금 바로 입장하실려면 패스워드를 입력해주세요.'\n      });\n    },\n    aboutAlertMessageChange: () => {\n      dispatch({\n        type: ALERT_MESSAGE_CHANGE,\n        message: `채널 패스워드를 입력해주세요.`\n      });\n    },\n    alertMessageFormat : () => {\n      dispatch({\n        type: ALERT_WARNING,\n        alert: '패스워드를 입력해주세요.',\n        color: '#3f46ad',\n        resultBoolean : false\n      });\n    },\n    loginpopEvent: () => {\n      dispatch({\n        type : LOGGIN_POP_OPEN,\n        popBoolean : true\n      })\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps, null, { withref: true })(App);\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst Alert = ({ gochnanelRoom, spinner, passCheckRef, passwordCheck, popClose, pass, focustitle, inputCancel, alertMessage, alertBoxBottom, alertColor }) => {\n  return (\n    <div className=\"AlertBox\">\n      <div className=\"loginContent\">\n        <div className=\"close-btn\">\n          <i className=\"fas fa-times\" onClick={popClose}></i>\n        </div>\n        <form>\n          <h3>{alertMessage}</h3>\n          <label htmlFor=\"pass_check\">\n            <input type=\"password\" name=\"pass_check\" ref={passCheckRef} placeholder='패스워드' autoFocus />\n            <button name=\"pass_check\" onClick={passwordCheck} >\n              check\n              {\n                spinner ?  <i className=\"fas fa-spinner\"></i> : null\n              }\n            </button>\n          </label>\n        </form>\n        <div className=\"pass-check\">\n          {\n            pass ?\n              <p className=\"sucess-password\" onClick={gochnanelRoom}>패스워드가 일치합니다. 참여하실려면 클릭해주세요.</p> : <p style={{ color : alertColor }}>{alertBoxBottom}</p>\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Alert;","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport Alert from './Alert.jsx';\n\nconst Main = ({ gochnanelRoom, channelAlertMessage, saveFormData, inputRef, passRef, passCheckRef, passwordCheck, popClose, pass, focustitle, inputCancel, popopen, alertMessage, spinner, alertBoxBottom, alertColor }) => {\n  return (\n    <div className=\"meeting-room-create\">\n      <div className=\"rooms_title\">\n        <form>\n          <label htmlFor=\"rooms_title\">\n            <h1>\n              <img src=\"https://github.com/seoksanghwan/videosConf---client/blob/master/src/img/logo.png?raw=true\" alt=\"\" />\n            </h1>\n            <div className=\"inputbox\">\n              <input type=\"text\" id=\"rooms_title\" name=\"rooms_title\" ref={inputRef} placeholder=\"안녕하세요. 채널을 생성해주세요.\" />\n              <input type=\"password\" id=\"rooms_password\" name=\"rooms_title\" ref={passRef} placeholder=\"패스워드도 설정해주세요.\" />\n            </div>\n            <button name=\"rooms_title\" onClick={saveFormData} >Create!</button>\n            {\n              channelAlertMessage ?\n                <p className=\"goingChannel-Check-Message\" style={{ color: alertColor }}>{alertBoxBottom}</p> :\n                null\n            }\n          </label>\n        </form>\n      </div>\n      {\n        (popopen) ?\n          <Alert gochnanelRoom={gochnanelRoom} alertColor={alertColor} alertBoxBottom={alertBoxBottom} spinner={spinner} alertMessage={alertMessage} passCheckRef={passCheckRef} passwordCheck={passwordCheck} popClose={popClose} pass={pass} focustitle={focustitle} inputCancel={inputCancel} /> :\n          null\n      }\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst LoginAlert = ({ popClose }) => {\n  return (\n    <div className=\"AlertBox\">\n      <div className=\"loginContent\">\n        <div className=\"close-btn\">\n          <i className=\"fas fa-times\" onClick={popClose}></i>\n        </div>\n        <h2>로그인을 해주세요.</h2>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginAlert;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport LoginAlert from './LoginAlert.jsx';\n\nconst Navbar = ({ loggedPopUp, popopen, popClose, loginpopEvent, isLoggedIn, alertMessageFormat, signAlert, onLoginButtonClick, onLogoutButtonClick, items}) => {\n  return (\n    <div className=\"container\">\n      <div className=\"navbar-start\">\n        <div className=\"nav-content\">\n          <div className=\"nav-menu\">\n            <dl>\n              <dt><Link onClick={alertMessageFormat} to=\"/\"><img src=\"https://github.com/seoksanghwan/videosConf---client/blob/master/src/img/logo.png?raw=true\" alt=\"\"/></Link></dt>\n              <dd>\n                <Link onClick={alertMessageFormat} to=\"/about\">About</Link>\n              </dd>\n              <dd>\n                {\n                  (isLoggedIn) ?\n                    <Link onClick={alertMessageFormat} to=\"/rooms\">Channel List</Link> :\n                    <p onClick={loginpopEvent}>Channel List</p>\n                }\n              </dd>\n              <dd>\n                {\n                  (isLoggedIn) ?\n                    <p onClick={onLogoutButtonClick}>Sign Out</p> :\n                    <p onClick={onLoginButtonClick}>Sign In</p>\n                }\n              </dd>\n            </dl>\n          </div>\n          <div className=\"user-info-nav\">\n            {\n              (isLoggedIn) ?\n                <p className=\"userIn\"><img src={items.url} /> <strong>{items.name}</strong>님 안녕하세요.</p> :\n                <p>로그인을 해주세요.</p>\n            }\n          </div>\n        </div>\n      </div>\n      {\n        (loggedPopUp) ?\n          <LoginAlert popClose={popClose} /> :\n          null\n      }\n    </div>\n  );\n};\n\nexport default Navbar;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Alert from './Alert.jsx';\n\nconst About = ({ gochnanelRoom, channelAlertMessage, goingRef, goingChannel, passCheckRef, passwordCheck, popClose, pass, focustitle, popopen, inputCancel, alertMessage, spinner, alertBoxBottom, alertColor }) => {\n\treturn (\n\t\t<div className=\"about\">\n\t\t\t<div className=\"about-content\">\n\t\t\t\t<div className=\"about-img\"></div>\n\t\t\t\t<div className=\"about-info-text\">\n\t\t\t\t\t<h2>Videos Conf</h2>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t언제 어디서든 노트북만 있으면, 화상회의를<br />시작하실 수 있습니다.\n\t\t\t\t\t\t지금 바로 시작해보세요.\n\t\t\t\t\t </p>\n\t\t\t\t\t<div className=\"goingChannel\">\n\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t<label htmlFor=\"going_channel\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"going_channel\" name=\"going_channel\" ref={goingRef} placeholder=\"채널 제목을 입력해주세요!\" />\n\t\t\t\t\t\t\t\t<button name=\"going_channel\" onClick={goingChannel} >Go!</button>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tchannelAlertMessage ?\n\t\t\t\t\t\t\t\t\t\t<p className=\"goingChannel-Check-Message\" style={{ color: alertColor }}>{alertBoxBottom}</p> :\n\t\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{\n\t\t\t\t(popopen) ?\n\t\t\t\t\t<Alert gochnanelRoom={gochnanelRoom} alertColor={alertColor} alertBoxBottom={alertBoxBottom} spinner={spinner} alertMessage={alertMessage} passCheckRef={passCheckRef} passwordCheck={passwordCheck} popClose={popClose} pass={pass} focustitle={focustitle} inputCancel={inputCancel} /> :\n\t\t\t\t\tnull\n\t\t\t}\n\t\t</div>\n\t);\n};\n\nexport default About;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Link } from \"react-router-dom\";\nimport { uniqWith, isEqual } from \"lodash\";\nimport Alert from './Alert.jsx';\n\nconst Rooms = ({ gochnanelRoom, deleteAelrt, spinner, roomDelete, roomData, passCheckRef, passwordCheck, items, popopen, popEvent, popClose, roomDeletePop, pass, focustitle, inputCancel, alertMessage, alertBoxBottom, alertColor }) => {\n  return (\n    <div className=\"rooms-list\">\n      <dl>\n        <dt>\n          <h2 className=\"title\">\n            Enjoy Channel\n            <em>여기는 채널 리스트입니다.</em>\n          </h2>\n        </dt>\n        { \n          (roomData.length) ?\n          uniqWith(roomData, isEqual).map(data => {\n            return (\n              <dd key={data._id}>\n                <h3>\n                  {data.title}\n                  <p> Organiser {data.userName}</p>\n                </h3>\n                <div className=\"del-enter\">\n                  <button onClick={popEvent} data-id={data._id}>\n                    <i className=\"fas fa-sign-in-alt\" data-id={data._id}></i>\n                  </button>\n                  {\n                    (data.userName === items.name) ?\n                      <button onClick={roomDelete} data-mail={data.userMail} data-id={data._id} >\n                        <i className=\"fas fa-trash\" data-mail={data.userMail} data-id={data._id} ></i>\n                      </button> : null\n                  }\n                </div>\n              </dd>\n            );\n          }) :\n          <dd className=\"no-channel\">현재 채널이 없습니다. 생성해주세요. 🧐</dd>\n        }\n      </dl>\n      {\n        (popopen) ?\n          <Alert gochnanelRoom={gochnanelRoom} alertColor={alertColor} alertBoxBottom={alertBoxBottom} spinner={spinner} alertMessage={alertMessage} passCheckRef={passCheckRef} passwordCheck={passwordCheck} popClose={popClose} pass={pass} focustitle={focustitle} inputCancel={inputCancel} /> :\n          null\n      }\n      {\n        (deleteAelrt) ?\n          <div className=\"removeAlertBox\">\n            <div className=\"loginContent\">\n              <div className=\"close-btn\">\n                <i className=\"fas fa-times\" onClick={roomDeletePop}></i>\n              </div>\n              <h2>채널이 삭제 되었습니다.</h2>\n            </div>\n          </div> :\n          null\n      }\n    </div>\n  );\n};\n\nexport default Rooms;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { uniqWith, isEqual } from \"lodash\";\n\nexport default class RoomsDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.remoteVideos = {};\n  }\n\n  componentDidMount() {\n    const { room_name } = this.props.match.params;\n    this.webrtc = this.props.webrtc;\n    this.props.startLoclaVideo(this.localVideo);\n    this.props.AddpeerVideo(this.remoteVideos);\n    this.props.joinChat(room_name);\n  }\n\n  render() {\n    const { peers, email, url, AddpeerVideo, webrtc, disconnect, handleSelfMute, mute } = this.props;\n    const { room_name } = this.props.match.params;\n    return (\n      <div className=\"details-box\">\n        <div className=\"sidebar local\">\n          <h2>\n            {room_name}\n            <em><i className=\"far fa-user\"></i> {peers.length + 1}</em>\n          </h2>\n          <div className=\"localBox\">\n            <video id='localVideo' autoPlay={true} ref={(vid) => this.localVideo = vid} />\n            <div className=\"nick\">\n              <p> {email} </p>\n            </div>\n          </div>\n          <div className=\"buttons\">\n            <button onClick={handleSelfMute}>\n              {\n                (mute) ?\n                  <i className=\"fas fa-volume-up\"></i> :\n                  <i className=\"fas fa-volume-mute\"></i>\n              }\n            </button>\n            <button onClick={disconnect}>\n              <i className=\"fas fa-sign-out-alt\"></i>\n            </button>\n          </div>\n          <div className=\"remotePeerList\">\n            <h3>Member</h3>\n            <ul>\n              <li> <img src={url} alt=\"\" /> <p>{email}</p></li>\n              {\n                peers.map(name => <li key={name.id}> <img src={name.nick.split(',')[1]} alt=\"\" /> <p>{name.nick.split(',')[0]}</p></li>)\n              }\n            </ul>\n          </div>\n        </div>\n        <div className=\"remotevideo\" >\n          {\n            uniqWith(peers, isEqual).map(data => (\n              <div className=\"vidContainer\" key={data.id} id={`${webrtc.getContainerId(data)}`} >\n                <video id={webrtc.getId(data)} autoPlay={true} ref={(vid) => this.remoteVideos[data.id] = vid} playsInline />\n                <div className=\"nick\">\n                  <p>{data.nick.split(',')[0]}</p>\n                </div>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    );\n  };\n};\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Main from './Main.jsx';\nimport Navbar from './Navbar.jsx';\nimport About from './About.jsx';\nimport Rooms from './Rooms.jsx';\nimport RoomsDetails from './RoomsDetails.jsx';\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    window.onpopstate = e => {\n      this.props.popClose();\n    }\n  }\n\n  componentDidUpdate() {\n    if (!this.props.location.pathname.split('/rooms/')[1]) {\n      this.disconnectSet();\n    }\n    this.props.roomMatch(this.props.isroom);\n  }\n\n  disconnectSet() {\n    this.props.webrtc.connection.disconnect();\n    this.props.webrtc.stopLocalVideo();\n    this.props.webrtc.leaveRoom();\n  }\n\n  disconnect() {\n    this.props.history.push('/rooms');\n    this.props.alertMessageChange();\n    this.props.popClose();\n  }\n\n  render() {\n    const {\n      isLoggedIn,\n      inputRef,\n      goingRef,\n      items,\n      isroom,\n      init,\n      peers,\n      inroom,\n      webrtc,\n      saveFormData,\n      AddpeerVideo,\n      joinChat,\n      startLoclaVideo,\n      handleSelfMute,\n      goingChannel,\n      passRef,\n      passCheckRef,\n      passwordCheck,\n      pass,\n      mute,\n      popopen,\n      popEvent,\n      popClose,\n      focustitle,\n      inputCancel,\n      alertMessage,\n      spinner,\n      alertBoxBottom,\n      alertColor,\n      channelAlertMessage,\n      alertMessageFormat,\n      onLogoutButtonClick,\n      onLoginButtonClick,\n      signAlert,\n      loginpopEvent,\n      loggedPopUp,\n      deleteAelrt,\n      roomDeletePop,\n      gochnanelRoom } = this.props;\n    return (\n      <div id=\"app\" className=\"container\">\n        <Navbar\n          items={items}\n          loginpopEvent={loginpopEvent}\n          loggedPopUp={loggedPopUp}\n          isLoggedIn={isLoggedIn}\n          signAlert={signAlert}\n          onLoginButtonClick={onLoginButtonClick}\n          onLogoutButtonClick={onLogoutButtonClick}\n          alertMessageFormat={alertMessageFormat}\n          alertBoxBottom={alertBoxBottom}\n          popEvent={popEvent}\n          popClose={popClose}\n          popopen={popopen}\n        />\n        <Switch>\n          <Route exact path=\"/\" render={props => {\n            return (\n              <Main\n                {...props}\n                spinner={spinner}\n                isLoggedIn={isLoggedIn}\n                saveFormData={saveFormData}\n                inputRef={inputRef}\n                passRef={passRef}\n                pass={pass}\n                popEvent={popEvent}\n                popClose={popClose}\n                popopen={popopen}\n                passwordCheck={passwordCheck}\n                passCheckRef={passCheckRef}\n                focustitle={focustitle}\n                alertMessage={alertMessage}\n                alertBoxBottom={alertBoxBottom}\n                alertColor={alertColor}\n                channelAlertMessage={channelAlertMessage}\n                gochnanelRoom={gochnanelRoom}\n              />\n            );\n          }} />\n          <Route exact path=\"/about\" render={props => {\n            return (\n              <About\n                {...props}\n                spinner={spinner}\n                goingRef={goingRef}\n                goingChannel={goingChannel}\n                pass={pass}\n                channelAlertMessage={channelAlertMessage}\n                popEvent={popEvent}\n                popClose={popClose}\n                popopen={popopen}\n                passwordCheck={passwordCheck}\n                passCheckRef={passCheckRef}\n                focustitle={focustitle}\n                inputCancel={inputCancel}\n                alertMessage={alertMessage}\n                alertBoxBottom={alertBoxBottom}\n                alertColor={alertColor}\n                gochnanelRoom={gochnanelRoom}\n              />\n            );\n          }} />\n          <Route exact path=\"/rooms\" render={props => {\n            if (isLoggedIn) {\n              return (\n                <Rooms\n                  spinner={spinner}\n                  popClose={popClose}\n                  popopen={popopen}\n                  pass={pass}\n                  items={items}\n                  roomData={isroom}\n                  roomDelete={this.props.roomDelete}\n                  passCheckRef={passCheckRef}\n                  passwordCheck={passwordCheck}\n                  popEvent={popEvent}\n                  focustitle={focustitle}\n                  inputCancel={inputCancel}\n                  alertMessage={alertMessage}\n                  alertBoxBottom={alertBoxBottom}\n                  alertColor={alertColor}\n                  deleteAelrt={deleteAelrt}\n                  roomDeletePop={roomDeletePop}\n                  gochnanelRoom={gochnanelRoom}\n                />\n              );\n            } else {\n              return <Redirect to=\"/\" />;\n            }\n          }} />\n          <Route exact path=\"/rooms/:room_name\" render={props => {\n            let email = items.name ? items.name : 'null';\n            if (isLoggedIn && isroom) {\n              if (pass) {\n                return (\n                  <RoomsDetails\n                    {...props}\n                    init={init}\n                    email={email}\n                    url={items.url}\n                    peers={peers}\n                    webrtc={webrtc}\n                    inroom={inroom}\n                    isroom={isroom}\n                    startLoclaVideo={startLoclaVideo}\n                    AddpeerVideo={AddpeerVideo}\n                    joinChat={joinChat}\n                    mute={mute}\n                    pass={pass}\n                    disconnect={this.disconnect.bind(this)}\n                    handleSelfMute={handleSelfMute}\n                    localref={(vid) => this.localVideo = vid}\n                  />\n                );\n              } else {\n                alert('잘못된 접근입니다.');\n                return <Redirect to=\"/rooms\" />;\n              }\n            } else {\n              return <span>Loading...</span>;\n            }\n          }} />\n          <Route render={() => <Redirect to=\"/\" />} />\n        </Switch>\n      </div>\n    );\n  };\n};\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport axios from 'axios';\nimport Home from './Home.jsx';\nimport { throws } from 'assert';\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.props.usingUserData();\n    this.props.channelData();\n    this.props.init();\n    this.props.chatRoomUsing();\n  }\n\n  saveFormDatas(event) {\n    event.preventDefault();\n    const { isLoggedIn, items, isroom } = this.props;\n    const channelTitle = this.inputNode.value\n    const channelPassword = this.passNode.value\n    this.props.saveFormData(isLoggedIn, items, channelTitle, channelPassword, isroom, this.props.aboutPopEvent);\n    this.props.MainAlertMessageChange();\n    this.inputNode.value = '';\n    this.passNode.value = '';\n  }\n\n  roomDeletes(event) {\n    event.preventDefault();\n    const dataId = event.target.dataset.id;\n    this.props.roomDelete(dataId);\n  }\n\n  goingChannel(event) {\n    event.preventDefault();\n    const channelTitle = this.gochannel.value;\n    const { isLoggedIn, isroom } = this.props;\n    const titleEqualCheck = isroom.filter(data => data.title === channelTitle)[0]\n    this.props.goingChannels(isLoggedIn, channelTitle, isroom, titleEqualCheck, this.props.aboutPopEvent)\n    this.props.aboutAlertMessageChange();\n    this.gochannel.value = '';\n  }\n\n  passwordCheck(event) {\n    event.preventDefault();\n    const dataTite = this.props.aboutValueTitle;\n    const dataId = this.props.focusid;\n    const passCheck = this.checkNode.value;\n    const { isroom } = this.props;\n    this.props.passpostCheck(passCheck, dataId, isroom, dataTite, event)\n  }\n\n  gochnanelRoom() {\n    const {focustitle} = this.props;\n    this.props.goMoveChannel(focustitle);\n  }\n\n  render() {\n    const {\n      isLoggedIn,\n      items,\n      isroom,\n      peers,\n      inroom,\n      webrtc,\n      joinChat,\n      AddpeerVideo,\n      startLoclaVideo,\n      handleSelfMute,\n      mute,\n      pass,\n      history,\n      popopen,\n      channelcheck,\n      popEvent,\n      popClose,\n      passpostCheck,\n      focustitle,\n      roomMatch,\n      alertHide,\n      inputCancel,\n      formatRoomPassword,\n      alertMessage,\n      loginUser,\n      userlogout,\n      aboutAlertMessageChange,\n      spinner,\n      alertBoxBottom,\n      alertColor,\n      channelAlertMessage,\n      alertMessageFormat,\n      loginpopEvent,\n      loggedPopUp,\n      deleteAelrt,\n      roomDeletePop,\n      gochnanelRoom } = this.props;\n    return (\n      <Router>\n        <Route\n          render={props => {\n            if (isroom) {\n              return (\n                (webrtc !== null) ?\n                  <Home\n                    {...props}\n                    isLoggedIn={isLoggedIn}\n                    items={items}\n                    isroom={isroom}\n                    channelcheck={channelcheck}\n                    alertMessageFormat={alertMessageFormat}\n                    saveFormData={this.saveFormDatas.bind(this)}\n                    roomDelete={this.roomDeletes.bind(this)}\n                    roomDeletePop={roomDeletePop.bind(this)}\n                    goingChannel={this.goingChannel.bind(this)}\n                    passwordCheck={this.passwordCheck.bind(this)}\n                    formatRoomPassword={formatRoomPassword}\n                    handleSelfMute={handleSelfMute.bind(this)}\n                    inputCancel={inputCancel.bind(this)}\n                    passpostCheck={passpostCheck}\n                    popEvent={popEvent.bind(this)}\n                    gochnanelRoom={this.gochnanelRoom.bind(this)}\n                    loginpopEvent={loginpopEvent.bind(this)}\n                    loggedPopUp={loggedPopUp}\n                    popClose={popClose}\n                    focustitle={focustitle}\n                    alertHide={alertHide}\n                    alertColor={alertColor}\n                    alertBoxBottom={alertBoxBottom}\n                    onLoginButtonClick={loginUser}\n                    onLogoutButtonClick={userlogout}\n                    signAlert={this.signAlertMessage}\n                    alertMessageChange={aboutAlertMessageChange}\n                    webrtc={webrtc}\n                    peers={peers}\n                    inroom={inroom}\n                    pass={pass}\n                    roomMatch={roomMatch}\n                    channelAlertMessage={channelAlertMessage}\n                    startLoclaVideo={startLoclaVideo}\n                    AddpeerVideo={AddpeerVideo}\n                    mute={mute}\n                    loginpopEvent={loginpopEvent}\n                    popopen={popopen}\n                    joinChat={joinChat}\n                    alertMessage={alertMessage}\n                    spinner={spinner}\n                    deleteAelrt={deleteAelrt}\n                    inputRef={value => this.inputNode = value}\n                    goingRef={value => this.gochannel = value}\n                    passRef={value => this.passNode = value}\n                    passCheckRef={value => this.checkNode = value}\n                  /> :\n                  <div className=\"loadspin\"></div>\n              )\n            }\n          }}\n        />\n      </Router>\n    );\n  };\n};\n","import * as firebase from 'firebase';\n\n var config = {\n  apiKey: \"AIzaSyA2aWhmtwcW-HJ80tYyv1Hs2A9MRzY3acQ\",\n  authDomain: \"videoconference-bf935.firebaseapp.com\",\n  databaseURL: \"https://videoconference-bf935.firebaseio.com\",\n  projectId: \"videoconference-bf935\",\n  storageBucket: \"videoconference-bf935.appspot.com\",\n  messagingSenderId: \"895553387250\"\n};\nfirebase.initializeApp(config);\n\nexport default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport reducer from './reducers'\nimport App from './containers/App.jsx';\nimport './style.css';\nimport './service/firebase';\nimport createHistory from 'history/createBrowserHistory';\n\nconst history = createHistory({ forceRefresh: true });\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\t\n    <App history={history}/>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}